<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>About on</title><link>https://williamcook.dev/</link><description>Recent content in About on</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Thu, 19 Dec 2024 14:29:05 -0500</lastBuildDate><atom:link href="https://williamcook.dev/index.xml" rel="self" type="application/rss+xml"/><item><title>Why Go Ignite Talk</title><link>https://williamcook.dev/posts/why-go-ignite-talk/</link><pubDate>Thu, 19 Dec 2024 14:29:05 -0500</pubDate><guid>https://williamcook.dev/posts/why-go-ignite-talk/</guid><description>&lt;h1 id="why-go">Why Go?&lt;/h1>
&lt;p>This is less a blog post and more a repository for my slides.&lt;/p>
&lt;h2 id="background">Background&lt;/h2>
&lt;p>I gave this talk on December 18th 2024 at the &lt;a href="https://orlandodevs.com">Orlando Devs&lt;/a> Holiday Party.&lt;/p>
&lt;h2 id="some-notes">Some Notes&lt;/h2>
&lt;p>As these are just the slides, you&amp;rsquo;re going to miss most of the content of the talk. But know
that this is a very cursory introduction to Go. All of what I cover and more can be discovered
on the &lt;a href="https://go.dev/tour/welcome/1">Tour of Go&lt;/a>. I wholly recommend you spend half an hour
or so to complete that if you are interested in learning more about the Go syntax and features.&lt;/p></description><content>&lt;h1 id="why-go">Why Go?&lt;/h1>
&lt;p>This is less a blog post and more a repository for my slides.&lt;/p>
&lt;h2 id="background">Background&lt;/h2>
&lt;p>I gave this talk on December 18th 2024 at the &lt;a href="https://orlandodevs.com">Orlando Devs&lt;/a> Holiday Party.&lt;/p>
&lt;h2 id="some-notes">Some Notes&lt;/h2>
&lt;p>As these are just the slides, you&amp;rsquo;re going to miss most of the content of the talk. But know
that this is a very cursory introduction to Go. All of what I cover and more can be discovered
on the &lt;a href="https://go.dev/tour/welcome/1">Tour of Go&lt;/a>. I wholly recommend you spend half an hour
or so to complete that if you are interested in learning more about the Go syntax and features.&lt;/p>
&lt;h2 id="following-up">Following Up&lt;/h2>
&lt;p>Please reach out if you want to learn more about Go or talk about Go-related things! The best
way is to &lt;a href="https://www.linkedin.com/in/wgeorgecook/">connect with me on LinkedIn&lt;/a>.&lt;/p>
&lt;h2 id="the-slides">The Slides&lt;/h2>
&lt;p>Here are my slides! The Gopher photos in the Mascot slide were taken from the &lt;a href="https://go.dev/blog/gopher">Go blog&lt;/a> and the
backgrounds were made in &lt;a href="https://www.photopea.com/">Photopea&lt;/a> using &lt;a href="https://scrapbox.io/icons/golang">this image&lt;/a> I found online.&lt;/p>
&lt;div class="image-gallery">
&lt;img src="https://williamcook.dev/img/why-go/01-why-go.png" alt="01-why-go.png">
&lt;img src="https://williamcook.dev/img/why-go/02-why-go.png" alt="02-why-go.png">
&lt;img src="https://williamcook.dev/img/why-go/03-why-go.png" alt="03-why-go.png">
&lt;img src="https://williamcook.dev/img/why-go/04-why-go.png" alt="04-why-go.png">
&lt;img src="https://williamcook.dev/img/why-go/05-why-go.png" alt="05-why-go.png">
&lt;img src="https://williamcook.dev/img/why-go/06-why-go.png" alt="06-why-go.png">
&lt;img src="https://williamcook.dev/img/why-go/07-why-go.png" alt="07-why-go.png">
&lt;img src="https://williamcook.dev/img/why-go/08-why-go.png" alt="08-why-go.png">
&lt;img src="https://williamcook.dev/img/why-go/09-why-go.png" alt="09-why-go.png">
&lt;img src="https://williamcook.dev/img/why-go/10-why-go.png" alt="10-why-go.png">
&lt;img src="https://williamcook.dev/img/why-go/11-why-go.png" alt="11-why-go.png">
&lt;img src="https://williamcook.dev/img/why-go/12-why-go.png" alt="12-why-go.png">
&lt;img src="https://williamcook.dev/img/why-go/13-why-go.png" alt="13-why-go.png">
&lt;img src="https://williamcook.dev/img/why-go/14-why-go.png" alt="14-why-go.png">
&lt;img src="https://williamcook.dev/img/why-go/15-why-go.png" alt="15-why-go.png">
&lt;img src="https://williamcook.dev/img/why-go/16-why-go.png" alt="16-why-go.png">
&lt;img src="https://williamcook.dev/img/why-go/17-why-go.png" alt="17-why-go.png">
&lt;img src="https://williamcook.dev/img/why-go/18-why-go.png" alt="18-why-go.png">
&lt;img src="https://williamcook.dev/img/why-go/19-why-go.png" alt="19-why-go.png">
&lt;img src="https://williamcook.dev/img/why-go/20-why-go.png" alt="20-why-go.png">
&lt;/div></content></item><item><title>Goroutines in a Mine</title><link>https://williamcook.dev/posts/goroutines-in-a-mine/</link><pubDate>Sun, 22 Sep 2024 22:02:04 -0400</pubDate><guid>https://williamcook.dev/posts/goroutines-in-a-mine/</guid><description>&lt;h1 id="a-canary-in-a-gem-mine">A Canary? In a Gem Mine?&lt;/h1>
&lt;p>Goroutines are, for me, &lt;em>the killer feature of Go&lt;/em>. Asynchronous communication between isolated, concurrent workloads was the use case that made me a Go developer. It&amp;rsquo;s a complex topic, and it can be really easy to do improperly. Heck, I even had to give this little projects a few good go overs to make the example correct.&lt;/p>
&lt;h2 id="concurrent-work">Concurrent work?&lt;/h2>
&lt;p>Concurrency is the ability of a program to do a collective piece of work in chunks. Some pieces of that work take longer than others, and sometimes the order in which work is performed does not matter. We can use Goroutines to piece out this work, letting the scheduler start and stop processes as necessary. If you would like some very Go-specific information about the language implementation of concurrency, I &lt;em>highly&lt;/em> recommend reading the &lt;a href="https://go.dev/doc/effective_go#concurrency">Concurrency section of &lt;em>Effective Go&lt;/em> on go.dev&lt;/a>.&lt;/p></description><content>&lt;h1 id="a-canary-in-a-gem-mine">A Canary? In a Gem Mine?&lt;/h1>
&lt;p>Goroutines are, for me, &lt;em>the killer feature of Go&lt;/em>. Asynchronous communication between isolated, concurrent workloads was the use case that made me a Go developer. It&amp;rsquo;s a complex topic, and it can be really easy to do improperly. Heck, I even had to give this little projects a few good go overs to make the example correct.&lt;/p>
&lt;h2 id="concurrent-work">Concurrent work?&lt;/h2>
&lt;p>Concurrency is the ability of a program to do a collective piece of work in chunks. Some pieces of that work take longer than others, and sometimes the order in which work is performed does not matter. We can use Goroutines to piece out this work, letting the scheduler start and stop processes as necessary. If you would like some very Go-specific information about the language implementation of concurrency, I &lt;em>highly&lt;/em> recommend reading the &lt;a href="https://go.dev/doc/effective_go#concurrency">Concurrency section of &lt;em>Effective Go&lt;/em> on go.dev&lt;/a>.&lt;/p>
&lt;h2 id="a-refresher">A refresher&lt;/h2>
&lt;p>This code (found in my &lt;a href="https://github.com/wgeorgecook/goroutines-in-a-mine">Github repo here&lt;/a>) utilizes interfaces in a similar way I explained in &lt;a href="https://williamcook.dev/posts/botanical_exploration_of_abstract_types_in_go/">my botanical exploration of abstract types in Go&lt;/a> blog post. There is also code generated via &lt;code>go:generate&lt;/code> comments. Which you can learn more about &lt;a href="https://williamcook.dev/posts/go_generate_protobuf/">in my post about using Go Generate for Protobuf&lt;/a>. Neither of those are required reading, but can help you understand the code a little better if some of these topics are a little foreign to you.&lt;/p>
&lt;h2 id="more-than-one-way-to-mine-some-diamonds">More Than One Way to Mine Some Diamonds&lt;/h2>
&lt;p>If you&amp;rsquo;ve ever spent several days mining some land under your base in &lt;em>Minecraft&lt;/em>, then you know there&amp;rsquo;s lots of different ways to get those diamonds. You can dig some nice long strips running parallel to catch as much at one level as you want. You can find a cave system and go spellunking until you happen upon a diamond vein. You can load up on TNT and blow up everything within a couple of chunks and catch what&amp;rsquo;s left over. You can group up with friends. You can take some solo time. It doesn&amp;rsquo;t matter how the diamonds are found, it only matters that they are.&lt;/p>
&lt;h2 id="worker-patterns-in-go">Worker Patterns in Go&lt;/h2>
&lt;p>Many times you want to implement the same pattern in your program. You can have a stream of work and you need to make a few different database calls to build a response. Some data from Mongo, a little bit of Postgres. Grab some data from an S3 bucket. Whatever! The pieces are entirely independent of each other, so they don&amp;rsquo;t need to wait for each other to complete before another can start working again. Now, if you will excuse my brief foray into practicallity, we can resume the contriving.&lt;/p>
&lt;h2 id="high-ho">High Ho!&lt;/h2>
&lt;p>Let&amp;rsquo;s look at some code.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">init&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">inChan&lt;/span> = make(&lt;span style="color:#a6e22e">channeling&lt;/span>.&lt;span style="color:#a6e22e">InputChan&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">errChan&lt;/span> = make(&lt;span style="color:#a6e22e">channeling&lt;/span>.&lt;span style="color:#a6e22e">ErrChan&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">doneChan&lt;/span> = make(&lt;span style="color:#66d9ef">chan&lt;/span> &lt;span style="color:#66d9ef">bool&lt;/span>, &lt;span style="color:#ae81ff">1&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">workChan&lt;/span> = make(&lt;span style="color:#66d9ef">chan&lt;/span> &lt;span style="color:#66d9ef">bool&lt;/span>, &lt;span style="color:#ae81ff">1&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>In the &lt;code>init&lt;/code> function, I create several channels. Channels are the way Goroutines communicate with each other. If you can tell from the context, these are channels for input workers, error reporting, to indicate when work is done, and work to do. The channels are empty though, so let&amp;rsquo;s fill them up.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#a6e22e">_&lt;/span>, &lt;span style="color:#a6e22e">name&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#66d9ef">range&lt;/span> &lt;span style="color:#a6e22e">names&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">inChan&lt;/span> &lt;span style="color:#f92672">&amp;lt;-&lt;/span> &lt;span style="color:#a6e22e">worker&lt;/span>.&lt;span style="color:#a6e22e">New&lt;/span>(&lt;span style="color:#a6e22e">name&lt;/span>, &lt;span style="color:#a6e22e">workChan&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The syntax is pretty simple:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">chanToReceive&lt;/span> &lt;span style="color:#f92672">&amp;lt;-&lt;/span> &lt;span style="color:#a6e22e">thingToSend&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Similarly, we can read from channels in a loop. Let&amp;rsquo;s examine the &lt;code>channeling&lt;/code> package.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">Process&lt;/span>(&lt;span style="color:#a6e22e">inChan&lt;/span> &lt;span style="color:#a6e22e">InputChan&lt;/span>, &lt;span style="color:#a6e22e">errChan&lt;/span> &lt;span style="color:#a6e22e">ErrChan&lt;/span>, &lt;span style="color:#a6e22e">done&lt;/span> &lt;span style="color:#a6e22e">DoneChan&lt;/span>, &lt;span style="color:#a6e22e">workChan&lt;/span> &lt;span style="color:#a6e22e">WorkChan&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">doWork&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#66d9ef">func&lt;/span>(&lt;span style="color:#a6e22e">i&lt;/span> &lt;span style="color:#a6e22e">Input&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">i&lt;/span>.&lt;span style="color:#a6e22e">DoWork&lt;/span>(); &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">errChan&lt;/span> &lt;span style="color:#f92672">&amp;lt;-&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">log&lt;/span>.&lt;span style="color:#a6e22e">Println&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Process is listening...&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">doneCounter&lt;/span> = &lt;span style="color:#ae81ff">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">select&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">case&lt;/span> &lt;span style="color:#a6e22e">i&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#f92672">&amp;lt;-&lt;/span>&lt;span style="color:#a6e22e">inChan&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">go&lt;/span> &lt;span style="color:#a6e22e">doWork&lt;/span>(&lt;span style="color:#a6e22e">i&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">case&lt;/span> &lt;span style="color:#f92672">&amp;lt;-&lt;/span>&lt;span style="color:#a6e22e">workChan&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">doneCounter&lt;/span>&lt;span style="color:#f92672">++&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">doneCounter&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#ae81ff">7&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">done&lt;/span> &lt;span style="color:#f92672">&amp;lt;-&lt;/span> &lt;span style="color:#66d9ef">true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>To read from a channel, you can either assign it using the walrus or use it a signal. In either case, you&amp;rsquo;ll want a &lt;code>select&lt;/code> (if reading from multiple channels) or use &lt;code>range&lt;/code> on a single channel.&lt;/p>
&lt;h2 id="off-to-work-we-go">Off to Work We Go&lt;/h2>
&lt;p>A keen observer noticed that &lt;code>Process&lt;/code> function above reads from the &lt;code>inChan&lt;/code> and assigns it to &lt;code>i&lt;/code>. It then calls &lt;code>doWork&lt;/code> passing &lt;code>i&lt;/code> in as an argument. But we do something special with this function call. It&amp;rsquo;s all about those two magic letters &lt;code>g&lt;/code> and &lt;code>o&lt;/code>. Goroutines are spawned when you call a function (either named or anonymous) using the &lt;code>go&lt;/code> keyword. When a function is called this way, the work is passed off to the scheduler and it unblocks the function it was called from. In the instances of our hard working dwarfs, their work takes an arbitrary amount of time.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">d&lt;/span> &lt;span style="color:#a6e22e">Dwarf&lt;/span>) &lt;span style="color:#a6e22e">DoWork&lt;/span>() &lt;span style="color:#66d9ef">error&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">d&lt;/span>.&lt;span style="color:#a6e22e">logStep&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;doing some work!&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">defer&lt;/span> &lt;span style="color:#a6e22e">d&lt;/span>.&lt;span style="color:#a6e22e">sendDone&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">randTime&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">rand&lt;/span>.&lt;span style="color:#a6e22e">Int&lt;/span>() &lt;span style="color:#f92672">%&lt;/span> &lt;span style="color:#ae81ff">100&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">time&lt;/span>.&lt;span style="color:#a6e22e">Sleep&lt;/span>(&lt;span style="color:#a6e22e">time&lt;/span>.&lt;span style="color:#a6e22e">Duration&lt;/span>(&lt;span style="color:#a6e22e">randTime&lt;/span>&lt;span style="color:#f92672">/&lt;/span>&lt;span style="color:#ae81ff">5&lt;/span>) &lt;span style="color:#f92672">*&lt;/span> &lt;span style="color:#a6e22e">time&lt;/span>.&lt;span style="color:#a6e22e">Second&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">randTime&lt;/span>&lt;span style="color:#f92672">%&lt;/span>&lt;span style="color:#ae81ff">2&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">d&lt;/span>.&lt;span style="color:#a6e22e">Error&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">d&lt;/span>.&lt;span style="color:#a6e22e">logStep&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;success!&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Without using Goroutines, all of this sleepiness could prevent other dwarves from completing their work in a timely manner!&lt;/p>
&lt;h2 id="synchronous-but-with-extra-steps">Synchronous, But With Extra Steps&lt;/h2>
&lt;p>It&amp;rsquo;s important to test your application and ensure that you have the right code design. You could very likely be implenting a purely synchronous workflow by missing a goroutine, or by locking until one goroutine exits. On the other end, you could get deadlock by preventing your goroutines from exiting (but keeping them alive)!&lt;/p>
&lt;h2 id="raise-your-own-pickaxe">Raise Your Own Pickaxe&lt;/h2>
&lt;p>There&amp;rsquo;s enough code in this repo for you to see how to handle error reporting when doing work in goroutines. You can implement contexts to end work early if it&amp;rsquo;s not needed anymore. Explore how you can use a &lt;code>sync.WaitGroup&lt;/code> to handle the blocking. Thinking in asynchronous processes requires a bit of a paradigm shift. Build the program (&lt;code>go build .&lt;/code> or &lt;code>go run main.go&lt;/code>) and watch the work queue up and finish in a non-deterministic way. So please experiment and discover what treasures await to those willing to venture the depths of this mine 💎&lt;/p></content></item><item><title>Botanical_exploration_of_abstract_types_in_go</title><link>https://williamcook.dev/posts/botanical_exploration_of_abstract_types_in_go/</link><pubDate>Wed, 04 Sep 2024 20:42:44 -0400</pubDate><guid>https://williamcook.dev/posts/botanical_exploration_of_abstract_types_in_go/</guid><description>&lt;h1 id="a-forest-full-of-trees">A Forest Full of Trees&lt;/h1>
&lt;p>Are you a Go developer who wants a solid reference for how interfaces and struct composition work? Look no further! Inside the &lt;a href="https://github.com/wgeorgecook/interforestaces">code sample on GitHub&lt;/a> are a few submodules you might find handy. Feel free to open up that repo, but we will be referencing code from it here directly.&lt;/p>
&lt;h2 id="inter-forest-aces">Inter-forest-aces&lt;/h2>
&lt;p>An interface in Go is an abstract type. That is, it describes something without actually embodying the thing itself. Interfaces take this shape:&lt;/p></description><content>&lt;h1 id="a-forest-full-of-trees">A Forest Full of Trees&lt;/h1>
&lt;p>Are you a Go developer who wants a solid reference for how interfaces and struct composition work? Look no further! Inside the &lt;a href="https://github.com/wgeorgecook/interforestaces">code sample on GitHub&lt;/a> are a few submodules you might find handy. Feel free to open up that repo, but we will be referencing code from it here directly.&lt;/p>
&lt;h2 id="inter-forest-aces">Inter-forest-aces&lt;/h2>
&lt;p>An interface in Go is an abstract type. That is, it describes something without actually embodying the thing itself. Interfaces take this shape:&lt;/p>
&lt;pre tabindex="0">&lt;code>type someIFace interface {
someMethod() string
someOtherMethod() int
}
&lt;/code>&lt;/pre>&lt;p>Notice that in &lt;code>someIFace&lt;/code>, there are two methods. One returns a string, and another an int. This is helpful if you want a function that operates on types, but you want to adapt what those types are situationally. To put it into context, take the interface from &lt;code>package trees&lt;/code>.&lt;/p>
&lt;pre tabindex="0">&lt;code>// ITree describes an abstract tree
type ITree interface {
GetCategory() string
GetGenus() string
GetSpecies() string
GetCommonName() string
Spring() string
Summer() string
Fall() string
Winter() string
}
&lt;/code>&lt;/pre>&lt;p>The interface says &lt;em>nothing&lt;/em> about any particular tree. It just defines how a concrete tree will describe itself. Some of these methods are &lt;em>implemented&lt;/em> (that is to say, these methods exist) on the concrete type &lt;code>Tree&lt;/code>.&lt;/p>
&lt;pre tabindex="0">&lt;code>// Tree is a concrete structure to build a Tree with.
type Tree struct {
genus, species, commonName string
}
// GetGenus returns the genus of the receiving tree.
func (t Tree) GetGenus() string {
return t.genus
}
// GetSpecies returns the species of the receiving tree.
func (t Tree) GetSpecies() string {
return t.species
}
// GetCommonName returns the common name of the receiving tree.
func (t Tree) GetCommonName() string {
return t.commonName
}
&lt;/code>&lt;/pre>&lt;p>However, since &lt;code>Tree&lt;/code> doesn&amp;rsquo;t implement every method of &lt;code>ITree&lt;/code>, it does not &lt;em>satisfy&lt;/em> the interface.&lt;/p>
&lt;h2 id="growing-some-deeper-roots">Growing some deeper roots&lt;/h2>
&lt;p>While a &lt;code>Tree&lt;/code> implements some of the methods that &lt;code>ITree&lt;/code> requires, the methods related to the seaons are left unsatisfied. This is where both packages &lt;code>deciduous&lt;/code> and &lt;code>conifer&lt;/code> come into play.&lt;/p>
&lt;h3 id="planting-a-seed-or-a-struct">Planting a seed (or a struct)&lt;/h3>
&lt;p>If you come from another language, you might be familiar with &lt;em>inheritance&lt;/em>. This is the idea that something (usually a &lt;em>class&lt;/em>) can pass down properties to other things (often called their children). The thing receiving these properties is &lt;em>inheriting&lt;/em> those from its parent. Go doesn&amp;rsquo;t strictly have this, but we have something close called &lt;em>embedding&lt;/em>. When we embed a struct into another, all of the properties of the outer struct are passed down to the struct doing the embedding. Here, both &lt;code>Conifer&lt;/code> and &lt;code>Deciduous&lt;/code> embed the &lt;code>Trees&lt;/code> struct.&lt;/p>
&lt;pre tabindex="0">&lt;code>package conifer
// Confier is type of tree. All fields are
// composed of the Tree type from the trees package.
type Conifer struct {
trees.Tree
}
&lt;/code>&lt;/pre>&lt;pre tabindex="0">&lt;code>package deciduous
// Deciduous is type of tree. All fields are
// composed of the Tree type from the trees package.
type Deciduous struct {
trees.Tree
}
&lt;/code>&lt;/pre>&lt;p>Since the &lt;code>trees.Tree&lt;/code> struct has methods like &lt;code>GetCommonName&lt;/code> and properties like &lt;code>Genus&lt;/code> and &lt;code>Species&lt;/code>, these two structs do as well.&lt;/p>
&lt;h2 id="a-fork-in-the-road">A Fork in the Road&lt;/h2>
&lt;p>Conifers and deciduous trees have different lifecyles through. And they experience the turning of the seasons in very different ways. So we would not want them to receive those methods from a common &lt;code>Tree&lt;/code> ancestor. This is why we implement these methods separately for these two different categories of tree. For example:&lt;/p>
&lt;pre tabindex="0">&lt;code>package deciduous
// Spring returns a string representing the
// action deciduous trees take during spring.
func (d Deciduous) Spring() string {
return &amp;#34;Ahhh, new leaves and flowers!&amp;#34;
}
&lt;/code>&lt;/pre>&lt;pre tabindex="0">&lt;code>package conifer
// Spring returns a string representing the
// action conifers take during spring.
func (c Conifer) Spring() string {
return &amp;#34;Growing some cones!&amp;#34;
}
&lt;/code>&lt;/pre>&lt;p>Both of these methods reveal how both differing kinds of trees experience the same thing in their own special way.&lt;/p>
&lt;h2 id="bring-it-around-the-campfire">Bring it around the campfire&lt;/h2>
&lt;p>As previously mentioned, the real power of an abstract type is to pass it to a function that operates on interfaces. Take a look at the &lt;code>trees.Lifecycle&lt;/code> function.&lt;/p>
&lt;pre tabindex="0">&lt;code>package trees
// Lifecycle iterates over the methods found in ITree to describe
// the argument Tree and it&amp;#39;s life over one year.
func Lifecycle(t ITree) {
fmt.Println(&amp;#34;Hello! I am &amp;#34; + t.GetGenus() + &amp;#34; &amp;#34; + t.GetSpecies() + &amp;#34; (&amp;#34; + t.GetCommonName() + &amp;#34;), &amp;#34; + t.GetCategory() + &amp;#34; tree!&amp;#34;)
fmt.Println(&amp;#34;Today I am going through my lifecycle. Come grow with me!&amp;#34;)
fmt.Println(&amp;#34;It&amp;#39;s Spring! &amp;#34; + t.Spring())
fmt.Println(&amp;#34;Summertime! &amp;#34; + t.Summer())
fmt.Println(&amp;#34;Autumn is here. &amp;#34; + t.Fall())
fmt.Println(&amp;#34;Brrrr winter! &amp;#34; + t.Winter())
}
&lt;/code>&lt;/pre>&lt;p>&lt;code>Lifecycle&lt;/code> does one thing - it progresses through a year of whatever &lt;code>ITree&lt;/code> is passed into it. It does not care whether the &lt;code>ITree&lt;/code> is deciduous, a conifer, or a new, third type! But rather than having &lt;code>deciduous.Lifecycle&lt;/code> and &lt;code>conifer.Lifecycle&lt;/code>, you can have this one place to make these &lt;code>ITree&lt;/code>s grow. Now how neat is that?&lt;/p>
&lt;h2 id="the-wilderness-must-be-explored">The wilderness must be explored!&lt;/h2>
&lt;p>Have some fun with this. Create some new types of trees that implement the &lt;code>ITree&lt;/code> interface. Or maybe rename &lt;code>ITree&lt;/code> to &lt;code>IPlant&lt;/code> and create some &lt;code>vascular&lt;/code> and &lt;code>nonvascular&lt;/code> plant types and let &lt;code>deciduous&lt;/code> and &lt;code>conifer&lt;/code> embed those structs as necessary. Test yourself too. Knowing now what you do about interfaces, do you know why &lt;code>trees.New()&lt;/code> can&amp;rsquo;t be passed into the &lt;code>trees.Lifecycle()&lt;/code> function, but both a &lt;code>conifer.New()&lt;/code> and a &lt;code>deciduous.New()&lt;/code> can?&lt;/p></content></item><item><title>Go_generate_protobuf</title><link>https://williamcook.dev/posts/go_generate_protobuf/</link><pubDate>Tue, 03 Sep 2024 14:30:59 -0400</pubDate><guid>https://williamcook.dev/posts/go_generate_protobuf/</guid><description>&lt;h1 id="playground-for-go-generate-using-proto-files">Playground for Go Generate Using Proto Files&lt;/h1>
&lt;p>This is a small application to demonstrate how to use &lt;code>go generate&lt;/code> to compile proto files into Go code.&lt;/p>
&lt;p>Note: all code is available on GitHub &lt;a href="https://github.com/wgeorgecook/playgen">here&lt;/a>.&lt;/p>
&lt;h2 id="go-generate">Go Generate&lt;/h2>
&lt;p>The &lt;a href="https://go.dev/blog/generate">original blog post&lt;/a> by Rob Pike is well worth a read.
At the bottom, Rob says&lt;/p>
&lt;blockquote>
&lt;p>Please use go generate creatively. It’s there to encourage experimentation.&lt;/p>
&lt;/blockquote>
&lt;p>This is one such experimentation.&lt;/p>
&lt;h2 id="protobuf-gprc-and-generating-code">Protobuf, gPRC, and Generating Code&lt;/h2>
&lt;p>If you are unfamiliar with &lt;a href="https://protobuf.dev/">Protocol Buffers&lt;/a> and &lt;a href="https://grpc.io/docs/languages/go/quickstart/">gRPC&lt;/a>, those linked resources are worth a read. However, just know that Protobuf is a language spec that allows you to define abstract API contracts within generated code stubs. Your application needs to implement these interfaces for clients to consume. The benefit is that both client and server consume and fulfill requests using the same base &lt;code>.proto&lt;/code> file and its generated code, allowing for incredible type safety.&lt;/p></description><content>&lt;h1 id="playground-for-go-generate-using-proto-files">Playground for Go Generate Using Proto Files&lt;/h1>
&lt;p>This is a small application to demonstrate how to use &lt;code>go generate&lt;/code> to compile proto files into Go code.&lt;/p>
&lt;p>Note: all code is available on GitHub &lt;a href="https://github.com/wgeorgecook/playgen">here&lt;/a>.&lt;/p>
&lt;h2 id="go-generate">Go Generate&lt;/h2>
&lt;p>The &lt;a href="https://go.dev/blog/generate">original blog post&lt;/a> by Rob Pike is well worth a read.
At the bottom, Rob says&lt;/p>
&lt;blockquote>
&lt;p>Please use go generate creatively. It’s there to encourage experimentation.&lt;/p>
&lt;/blockquote>
&lt;p>This is one such experimentation.&lt;/p>
&lt;h2 id="protobuf-gprc-and-generating-code">Protobuf, gPRC, and Generating Code&lt;/h2>
&lt;p>If you are unfamiliar with &lt;a href="https://protobuf.dev/">Protocol Buffers&lt;/a> and &lt;a href="https://grpc.io/docs/languages/go/quickstart/">gRPC&lt;/a>, those linked resources are worth a read. However, just know that Protobuf is a language spec that allows you to define abstract API contracts within generated code stubs. Your application needs to implement these interfaces for clients to consume. The benefit is that both client and server consume and fulfill requests using the same base &lt;code>.proto&lt;/code> file and its generated code, allowing for incredible type safety.&lt;/p>
&lt;h2 id="protoc-hassles">Protoc Hassles&lt;/h2>
&lt;p>Go developers using Protobuf for a few years are probably familiar with the &lt;code>protoc&lt;/code> binary used and the &lt;code>protoc-gen-go&lt;/code> plugin. This is the tool we use to generate Go stubs from proto files. Protoc commands can be provided via scripts, in Dockerfiles, or ran directly to ensure that code is generated and types are accessible to your application. This decouples the proto compilation step from your app compilation. If you want to couple the two together, &lt;code>go generate&lt;/code> may be your answer.&lt;/p>
&lt;h1 id="go-generate-again">Go Generate (again)&lt;/h1>
&lt;p>The &lt;code>go generate&lt;/code> command searches through your Go files for the &lt;code>//go:generate&lt;/code> comment (notice no space between the slashes and &lt;code>go&lt;/code>). Adding this tag tells the Go toolchain to run whatever shell commends follow.&lt;/p>
&lt;h2 id="tagging-for-go-generate">Tagging for Go Generate&lt;/h2>
&lt;p>You can see here that &lt;code>main.go&lt;/code> has two go generate tags.&lt;/p>
&lt;pre tabindex="0">&lt;code>//go:generate protoc --go_out=. --go-grpc_out=. proto/helloapis/messages.proto
//go:generate protoc --go_out=. --go-grpc_out=. proto/helloapis/services.proto
&lt;/code>&lt;/pre>&lt;p>These two tags will compile protos found in &lt;code>proto/helloapis&lt;/code> and move them into the directory indicated by their package name. In this instance, that directory is &lt;code>gen/helloapis/v1&lt;/code>.&lt;/p>
&lt;h1 id="building-the-application">Building the Application&lt;/h1>
&lt;p>Attemping to run &lt;code>go build .&lt;/code> before compiling the protos will fail.&lt;/p>
&lt;blockquote>
&lt;p>❯ go build .
client/client.go:6:2: package playgen/gen/helloapis/v1 is not in std (/snap/go/10630/src/playgen/gen/helloapis/v1)&lt;/p>
&lt;/blockquote>
&lt;p>To resolve this, run &lt;code>go generate ./...&lt;/code>.&lt;/p>
&lt;blockquote>
&lt;p>❯ go generate ./&amp;hellip;&lt;/p>
&lt;/blockquote>
&lt;p>Notice that a new &lt;code>gen&lt;/code> directory is in the repo root.&lt;/p>
&lt;pre tabindex="0">&lt;code>❯ ls
build client docker-compose.yaml gen go.mod go.sum main.go proto README.md server
&lt;/code>&lt;/pre>&lt;p>The application is now buildable and runnable!&lt;/p>
&lt;pre tabindex="0">&lt;code>❯ go build .
❯ ls
build client docker-compose.yaml gen go.mod go.sum main.go playgen proto README.md server
❯ ./playgen
Hello, vim-go!
&lt;/code>&lt;/pre></content></item><item><title>Functional_options_golang</title><link>https://williamcook.dev/posts/functional_options_golang/</link><pubDate>Wed, 07 Aug 2024 21:08:38 -0400</pubDate><guid>https://williamcook.dev/posts/functional_options_golang/</guid><description>&lt;h1 id="lets-say">Lets say&amp;hellip;&lt;/h1>
&lt;p>You are the maintainer of a widely used function in a fairly large service. This function abstracts away
all of the boilerplate necessary to log an error. The wider service has several different debugging tools.
For example, it could:&lt;/p>
&lt;ol>
&lt;li>Log errors to &lt;a href="https://rollbar.com">Rollbar&lt;/a>&lt;/li>
&lt;li>Instrument &lt;a href="https://opentelemetry.io/">OpenTelemetry&lt;/a>&lt;/li>
&lt;li>Support logging to stdout, to disk, or an async log aggregator.&lt;/li>
&lt;/ol>
&lt;p>the list can theoretically go on and on.&lt;/p>
&lt;h2 id="logerrorss-humble-beginnings">LogErrors&amp;rsquo;s Humble Beginnings&lt;/h2>
&lt;p>To start, you write your function to support your own use case, and make the api easy to consume for others.&lt;/p></description><content>&lt;h1 id="lets-say">Lets say&amp;hellip;&lt;/h1>
&lt;p>You are the maintainer of a widely used function in a fairly large service. This function abstracts away
all of the boilerplate necessary to log an error. The wider service has several different debugging tools.
For example, it could:&lt;/p>
&lt;ol>
&lt;li>Log errors to &lt;a href="https://rollbar.com">Rollbar&lt;/a>&lt;/li>
&lt;li>Instrument &lt;a href="https://opentelemetry.io/">OpenTelemetry&lt;/a>&lt;/li>
&lt;li>Support logging to stdout, to disk, or an async log aggregator.&lt;/li>
&lt;/ol>
&lt;p>the list can theoretically go on and on.&lt;/p>
&lt;h2 id="logerrorss-humble-beginnings">LogErrors&amp;rsquo;s Humble Beginnings&lt;/h2>
&lt;p>To start, you write your function to support your own use case, and make the api easy to consume for others.&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-code" data-lang="code">func LogError(e error, msg string) {
// assume a logger is configured
logger.Error(e.Error + &amp;#34;: &amp;#34; + msg)
}
&lt;/code>&lt;/pre>&lt;p>This is a simple enough function that formats an error and invokes the configured logger at the Error level.&lt;/p>
&lt;h2 id="logerrors-organic-growth">LogError&amp;rsquo;s Organic Growth&lt;/h2>
&lt;p>As this service matures, things can get out of hand. Let&amp;rsquo;s introduce some other, optional dependencies in a naive way.&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-code" data-lang="code">func LogError(e error, msg string, shouldRollbar bool, spanCtx context.Context) {
fmtErr := e.Error + &amp;#34;: &amp;#34; + msg
if shouldRollbar {
rollbar.Error(fmtErr)
}
if spanCtx != nil {
span := otel.NewSpan(&amp;#34;LogError&amp;#34;, spanCtx)
defer span.End()
span.RecordError(fmtErr)
}
logger.Error(fmtErr)
}
&lt;/code>&lt;/pre>&lt;p>This is fine and functional, but you can see how adding additional, optional features requires a full refactor of every function call. Furthermore, the caller has to populate these arguments even if they are falsy or &lt;code>nil&lt;/code>.&lt;/p>
&lt;h2 id="a-better-way">A Better Way&lt;/h2>
&lt;p>We can enforce some required arguments by defining them as we would before. Let&amp;rsquo;s say that &lt;code>err&lt;/code> and &lt;code>msg&lt;/code> are required params. However, logging to a span or triggering a Rollbar are completely optional. We can save the caller a hastle by not requiring them in the function call at all by using the functional options pattern.&lt;/p>
&lt;h1 id="functional-options">Functional Options&lt;/h1>
&lt;p>We need to create an &lt;code>option&lt;/code> type that we use internally to drive the logic for behavior. Leave this unexported so the caller doesn&amp;rsquo;t try and use it directly.&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-code" data-lang="code">type option struct {
withRollbar bool
withContext context.Context
}
&lt;/code>&lt;/pre>&lt;p>The real magic happens when we create a type that returns a function that accepts the option as an argument.&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-code" data-lang="code">type Options func(*option)
&lt;/code>&lt;/pre>&lt;p>We now create functions that return the &lt;code>Options&lt;/code> type that the caller can use.&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-code" data-lang="code">func WithRollbar() Options {
return func(o *option) {
o.withRollbar = true
}
}
func WithContext(ctx context.Context) Option {
return func(o *option) {
o.withContext = ctx
}
}
&lt;/code>&lt;/pre>&lt;h2 id="leveraging-functional-options">Leveraging Functional Options&lt;/h2>
&lt;p>All of the pieces are coming together, but as &lt;code>LogError&lt;/code> stands, it does not use options. Let&amp;rsquo;s fix that by first changing the function signature.&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-code" data-lang="code">func LogError(err error, msg string, opts ...Options) {
// function body
}
&lt;/code>&lt;/pre>&lt;p>Now the &lt;code>err&lt;/code> and &lt;code>message&lt;/code> arguments are required by the compiler (even if nil or empty). The &lt;code>...Options&lt;/code> syntax indicates that &lt;code>LogError&lt;/code> is now a &lt;em>variadic function&lt;/em>, and that the trailing arguments is a slice of length &amp;gt;= 0. The compiler will not enforce that any argument is present for the variadic argument. Functionally this means that &lt;code>opts&lt;/code> is entirely optional! However, we still need to leverage these options within the function.&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-code" data-lang="code">func LogError(err error, msg string, opts ...Options) {
fmtErr := err.Error() + &amp;#34;: &amp;#34; + msg
// instantiate an option struct to populate with
// provided options
o := options{}
// iterate through the provided options to populate
// data on the struct
for _, opt := opts {
opt(o)
}
// start performing logic based on provided options
if o.withRollbar {
rollbar.Error(fmtErr)
}
if o.withContext != nil {
span := otel.NewSpan(&amp;#34;LogError&amp;#34;, spanCtx)
defer span.End()
span.RecordError(fmtErr)
}
logger.Error(fmtErr)
}
&lt;/code>&lt;/pre>&lt;p>You can see the function body doesn&amp;rsquo;t change &lt;em>all that much&lt;/em>. But we have significatly reduced the signature and uncomplicated the things the caller needs to worry about.&lt;/p>
&lt;h2 id="using-logerror">Using LogError&lt;/h2>
&lt;p>With functional arguments, all of these are valid invocations of &lt;code>LogError&lt;/code>.&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-code" data-lang="code">err := errors.New(&amp;#34;there was an error!&amp;#34;)
msg := &amp;#34;could not perform operation&amp;#34;
ctx := context.Background()
LogError(err, msg)
LogError(err, msg, WithContext(ctx))
LogError(err, msg, WithRollbar())
LogError(err, msg, WithContext(ctx), WithRollbar())
LogError(err, msg, WithRollbar(), WithContext(ctx))
&lt;/code>&lt;/pre>&lt;p>Consumers of &lt;code>LogError&lt;/code> now no longer need to worry about providing a nil context or falsy &lt;code>shouldRollbar&lt;/code> value if they are unconcerned about those features.&lt;/p>
&lt;h2 id="extending-logerror">Extending LogError&lt;/h2>
&lt;p>Now that &lt;code>LogError&lt;/code> is a variadic function, we can add more options without needing to refactor any of its consumers. Let&amp;rsquo;s implement optionally logging to disk instead of standard out.&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-code" data-lang="code">type option struct {
withRollbar bool
withContext context.Context
withLogToDisk bool // new field
}
func WithLogToDisk() Option {
return func(o *option) {
o.withLogToDisk = true
}
}
func LogError(err error, msg string, opts ...Options) {
fmtErr := err.Error() + &amp;#34;: &amp;#34; + msg
// instantiate an option struct to populate with
// provided options
o := options{}
// iterate through the provided options to populate
// data on the struct
for _, opt := opts {
opt(o)
}
// start performing logic based on provided options
if o.withRollbar {
rollbar.Error(fmtErr)
}
if o.withContext != nil {
span := otel.NewSpan(&amp;#34;LogError&amp;#34;, spanCtx)
defer span.End()
span.RecordError(fmtErr)
}
if o.withLogToDisk {
// helper function assumed to exist
logErrorToDisk(fmtErr)
return
}
logger.Error(fmtErr)
}
&lt;/code>&lt;/pre>&lt;p>&lt;code>LogError&lt;/code> is now more functional for consumers who wish to leverage this option. However, because of the variadic nature of &lt;code>LogError&lt;/code>, we don&amp;rsquo;t need to do a single bit of refactoring the consumers and the api is unchanged. Anyone who wishes to log to disk instead of to standard out can do so like this:&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-code" data-lang="code">err := errors.New(&amp;#34;there was an error!&amp;#34;)
msg := &amp;#34;could not perform operation&amp;#34;
LogError(err, msg, WithLogToDisk())
&lt;/code>&lt;/pre>&lt;h1 id="thats-pretty-neat">That&amp;rsquo;s Pretty Neat&lt;/h1>
&lt;p>There is the overhead of planning for which arguments are required and which are options when maintaining a function such as &lt;code>LogError&lt;/code>. However, if you know that the function will be broadly consumed from users with differing needs then utilizing functional options is a great way to implement those dependencies without forcing them on every consumer. Functional options allow for easily extending functionality without requiring large refactors for the consumers of its api.&lt;/p></content></item><item><title>Javascript_truthiness</title><link>https://williamcook.dev/posts/javascript_truthiness/</link><pubDate>Fri, 23 Sep 2022 10:21:08 -0700</pubDate><guid>https://williamcook.dev/posts/javascript_truthiness/</guid><description>&lt;h2 id="comparisons-in-javascript">Comparisons in Javascript&lt;/h2>
&lt;p>While my title may say &amp;ldquo;Full Stack&amp;rdquo;, I&amp;rsquo;m really a backend dev who is pretty flexible and willing to hack around the front end when necessary. This can sometimes lead to me falling for some Javascript gotchas (see also [Python None]https://williamcook.dev/posts/python_none/). This week in Adventures With Javascript, I got to scratch my head on a bug where a form was falling back to a default value even when a valid input was entered.&lt;/p></description><content>&lt;h2 id="comparisons-in-javascript">Comparisons in Javascript&lt;/h2>
&lt;p>While my title may say &amp;ldquo;Full Stack&amp;rdquo;, I&amp;rsquo;m really a backend dev who is pretty flexible and willing to hack around the front end when necessary. This can sometimes lead to me falling for some Javascript gotchas (see also [Python None]https://williamcook.dev/posts/python_none/). This week in Adventures With Javascript, I got to scratch my head on a bug where a form was falling back to a default value even when a valid input was entered.&lt;/p>
&lt;h3 id="a-flexible-type-system">A Flexible Type System&lt;/h3>
&lt;p>One of Javascripts biggest flaws is actually one of it&amp;rsquo;s biggest strengths. Since Javascript does not require strict typing, it&amp;rsquo;s able to compare two different types and Javascript will do it&amp;rsquo;s best to coerce them to a shared type. For instance, you can compare strings and integers:&lt;/p>
&lt;pre tabindex="0">&lt;code>const a = 1;
const b = &amp;#39;1&amp;#39;;
console.log(a == b);
&amp;gt; true
&lt;/code>&lt;/pre>&lt;p>You can compare strings and booleans:&lt;/p>
&lt;pre tabindex="0">&lt;code>const a = false;
const b = &amp;#39;&amp;#39;;
console.log(a == b);
&amp;gt; true
&lt;/code>&lt;/pre>&lt;p>This flexibility makes it a lot less daunting for new developers. And if you&amp;rsquo;re designing and api but haven&amp;rsquo;t settled on a schema for the data,this system makes prototyping very rapid. However, there can be unintended drawbacks.&lt;/p>
&lt;h3 id="type-coercion">Type Coercion&lt;/h3>
&lt;p>You&amp;rsquo;ll notice in the second example above that an empty string is coerced to a falsy boolean. The same thing happens with the number 0.&lt;/p>
&lt;pre tabindex="0">&lt;code>const a = false;
const b = 0;
console.log(a == b);
&amp;gt; true
&lt;/code>&lt;/pre>&lt;p>Which can cause some issues if you&amp;rsquo;re doing some form validation where 0 is either a valid input, or the user provided input is transformed to 0 for the backend to process. In this example I was coercing a 12 hour AM/PM based user input into a 24 hour based number to send to the backend.&lt;/p>
&lt;pre tabindex="0">&lt;code>const twelveToTwentyFour = (timeInt, amOrPm) =&amp;gt; {
if (amOrPm == &amp;#39;PM&amp;#39;) {
// Add 12 to the provided timeInt but don&amp;#39;t send 12 PM as 24
return (timeInt === 12) ? 12 : timeInt + 12;
} else {
// Ensure we don&amp;#39;t send 12 AM as 12
return (timeInt === 12) ? 0 : timeInt;
}
}
&lt;/code>&lt;/pre>&lt;h3 id="bug-hunting">Bug Hunting&lt;/h3>
&lt;p>If the user passes in 12AM to this function, we transform it to 0 before we send it to the backend. However, this caused issues when we try to validate the form and fill in default values.&lt;/p>
&lt;pre tabindex="0">&lt;code> const start = twelveToTwentyFour(12, &amp;#39;AM&amp;#39;) || 8;
console.log(start);
&amp;gt; 8
&lt;/code>&lt;/pre>&lt;p>12AM is a valid time, so why are we getting the default value set on the form? Type coercion comes to help in here because we&amp;rsquo;re doing the &lt;code>or&lt;/code> operation here to validate the input.&lt;/p>
&lt;pre tabindex="0">&lt;code>const a = 0;
const b = 8;
console.log(a || b);
&amp;gt; 8
&lt;/code>&lt;/pre>&lt;p>You can verify that 0 here is being interpreted as a falsy value but comparing against a falsy boolean:&lt;/p>
&lt;pre tabindex="0">&lt;code>const a = 0;
const b = false;
console.log(a == b);
&amp;gt; true
&lt;/code>&lt;/pre>&lt;h3 id="bug-squishing">Bug Squishing&lt;/h3>
&lt;p>So here we are! We identified the bug. But how do we fix it? Luckily, Javascript has a way to do &lt;em>strict&lt;/em> type checking. Substitute that double equals (&lt;code>==&lt;/code>) for a triple equals (&lt;code>===&lt;/code>) and you&amp;rsquo;ll get more expected results.&lt;/p>
&lt;pre tabindex="0">&lt;code>const a = 0;
const b = false;
console.log(a === b);
&amp;gt; false
&lt;/code>&lt;/pre>&lt;p>We need to change our original valiation a little. Prior to user input, our start value is &lt;code>undefined&lt;/code>. Using a strict equality check on &lt;code>undefined&lt;/code> we can determine if we need to set this to the user provided input, or default it to 8.&lt;/p>
&lt;pre tabindex="0">&lt;code>const parsed = twelveToTwentyFour(12, &amp;#39;AM&amp;#39;)
const start = (parsed === undefined) ? 8 : parsed;
console.log(start);
&amp;gt; 0
&lt;/code>&lt;/pre>&lt;p>Calling the function without any arguments validates this for us.&lt;/p>
&lt;pre tabindex="0">&lt;code>const parsed = twelveToTwentyFour()
const start = (parsed === undefined) ? 8 : parsed;
console.log(start);
&amp;gt; 8
&lt;/code>&lt;/pre>&lt;h2 id="how-many-equals">How Many Equals?&lt;/h2>
&lt;p>If you&amp;rsquo;re like me and used to programming in strictly typed systems, some Javascript niceties like the triple equals can slip your mind. Sometimes you&amp;rsquo;re dealing with component libraries and the return values from those components don&amp;rsquo;t match what your API require. However, unless you have a really good reason to use a loose comparison, use the strict equals operator and avoid spending half a day dealing with problems like this. If you want to explore how the loose equality operator handles these type comparisons, &lt;a href="https://dorey.github.io/JavaScript-Equality-Table/">this table&lt;/a> shows exactly what comparisons are truthy and which are not.&lt;/p></content></item><item><title>Jpay_j5_mini</title><link>https://williamcook.dev/posts/jpay_j5_mini/</link><pubDate>Tue, 20 Sep 2022 08:42:23 -0700</pubDate><guid>https://williamcook.dev/posts/jpay_j5_mini/</guid><description>&lt;h1 id="j5-mini-and-purchased-content">J5 Mini and Purchased Content&lt;/h1>
&lt;p>A friend of mine recently finished his sentance at a facility that
allowed them to purchase the &lt;a href="https://www.prnewswire.com/news-releases/jpay-introduces-the-jp5mini-a-highly-customized-android-tablet-for-inmates-300110638.html">JP5 Mini&lt;/a> tablet for use while incarcerated. After his release, JPay removed the
in-facility restrictions and allowed them to retain the media they purchased from
JPay over the course of their sentancing. However, due to the conditions of
their release, they are unable to operate such electronic devices. They still wanted to keep their purchased media, so I figured I would try my hand.&lt;/p></description><content>&lt;h1 id="j5-mini-and-purchased-content">J5 Mini and Purchased Content&lt;/h1>
&lt;p>A friend of mine recently finished his sentance at a facility that
allowed them to purchase the &lt;a href="https://www.prnewswire.com/news-releases/jpay-introduces-the-jp5mini-a-highly-customized-android-tablet-for-inmates-300110638.html">JP5 Mini&lt;/a> tablet for use while incarcerated. After his release, JPay removed the
in-facility restrictions and allowed them to retain the media they purchased from
JPay over the course of their sentancing. However, due to the conditions of
their release, they are unable to operate such electronic devices. They still wanted to keep their purchased media, so I figured I would try my hand.&lt;/p>
&lt;h2 id="the-problem">The Problem&lt;/h2>
&lt;p>The JP5 Mini uses a custom fork of Android 4.2.2 (release date: 2012).
This custom version of Android contains a lot of security features that
prevent tampering from inmates. So no opening up the build version and
enabling developer settings. No ADB capabilities. No mounting for file
system access over USB. The tablet does have what appears to be a small
storage module soldered to the board where I think the SD card reader
would be. This prevents inmates from swapping cards and eliminates a
potential attack vector for hacking. So no just popping it open either.&lt;/p>
&lt;h2 id="the-solution">The Solution&lt;/h2>
&lt;p>Luckily, this version of Android DOES allow for APK installation. APKs
are Android applications. Think of them like a Windows .exe. There are
lots of websites that host APK files too for you to download. We need
an APK that runs an FTP server on the tablet.&lt;/p>
&lt;h3 id="the-apk">The APK&lt;/h3>
&lt;p>The built in broswer is pretty difficult to use given the size and
resolution the built in screen has. However, it&amp;rsquo;s what we need to use.
I used &lt;a href="https://ftp-server-ultimate.apk.gold/android-4.2.2">this FTP APK&lt;/a>
(not affiliated, and I make no guarantees about availability or functionality)
and it worked pretty well.&lt;/p>
&lt;h3 id="the-ftp-server">The FTP Server&lt;/h3>
&lt;p>FTP is an old protocol that allows files to get shared over a network.
You can pull files from the remote server or push files to it,
depending on permissions. We&amp;rsquo;re going to be pulling the purchased media.
If you&amp;rsquo;re using the APK I linked above, there are some configuration
steps. Make sure the tablet is connected to WiFi and that you know
the tablet&amp;rsquo;s IP (Settings -&amp;gt; Network, I&amp;rsquo;m not sure specifically).&lt;/p>
&lt;h4 id="server-configuration">Server Configuration&lt;/h4>
&lt;ol>
&lt;li>Click on the Settings cog in the app.&lt;/li>
&lt;li>Create new server, give it a name (the name doesn&amp;rsquo;t matter).&lt;/li>
&lt;li>Click the Users tab at the top of the app.&lt;/li>
&lt;li>Create a new user. Both the username and the password are arbitrary
but make sure you remember them because you will need it later. Leave
the Document Root as &lt;code>/&lt;/code>&lt;/li>
&lt;li>Save the user and server settings.&lt;/li>
&lt;li>Back at the main page of the app, click Start to run the server.&lt;/li>
&lt;/ol>
&lt;h3 id="the-ftp-client">The FTP Client&lt;/h3>
&lt;p>Now that the tablet is running a server, you need to download an FTP
client on your computer. For Macs, I really enjoy using &lt;a href="https://cyberduck.io">CyberDuck&lt;/a>. On Windows, you can use &lt;a href="https://filezilla-project.org">FileZilla&lt;/a>. Again, no affiliations or guarantees about these products. Get one
downloaded and let&amp;rsquo;s configure it together.&lt;/p>
&lt;h4 id="client-configuration">Client Configuration&lt;/h4>
&lt;p>Remember the username and password you set in the server on the tablet
above. You&amp;rsquo;ll need them here. Also get the tablet IP if you didn&amp;rsquo;t before.&lt;/p>
&lt;ol>
&lt;li>Connect to a new host. This is the IP from the tablet. The server
should also have generated a random port number. Put that in the Port
portion of the connection settings.&lt;/li>
&lt;li>Enter the username and password from the server settings in their places too.&lt;/li>
&lt;li>Click Quick Connect, and you should be given a file tree in the
connection window.&lt;/li>
&lt;/ol>
&lt;h4 id="getting-the-files">Getting The Files&lt;/h4>
&lt;p>The tablet uses that memory module as a virtual SD card, and it&amp;rsquo;s
accessible a few places. I found it easiest in &lt;code>/storage/sdcard/&lt;/code>.
Here are all of the internal media like Music, Pictures, Mail, etc.
Right click whichever folder you want to download and click the Download
option in the context menu. The network speeds on this device are not
fast, so be patient as they download.&lt;/p>
&lt;h2 id="the-conclusion">The Conclusion&lt;/h2>
&lt;p>This is a pretty weird device without a lot of documentation out on
the internet. I hope that this guide can show up in more searches when
other folks go digging for information on the JP5 Mini.&lt;/p></content></item><item><title>Python_none</title><link>https://williamcook.dev/posts/python_none/</link><pubDate>Tue, 26 Jul 2022 20:01:56 -0700</pubDate><guid>https://williamcook.dev/posts/python_none/</guid><description>&lt;h1 id="pythonic-none">Pythonic None&lt;/h1>
&lt;p>Today at work we had a silly bug that exposes how reliant I am on Go&amp;rsquo;s type system and compiler. I personally am too comfortable building a Docker image and assuming that the most egregious bugs were caught simply because the build was successful.&lt;/p>
&lt;h2 id="the-bug">The Bug&lt;/h2>
&lt;p>Python doesn&amp;rsquo;t require you to specify a return value. In fact, you can have a function that may not explicitly return at all. Since Python is a scripting language, it will automatically return when it hits the bottom of the function being called. When this happens without returning a specific value, any variable assigned to the function call will be &lt;code>None&lt;/code>. A silly but illustrating example:&lt;/p></description><content>&lt;h1 id="pythonic-none">Pythonic None&lt;/h1>
&lt;p>Today at work we had a silly bug that exposes how reliant I am on Go&amp;rsquo;s type system and compiler. I personally am too comfortable building a Docker image and assuming that the most egregious bugs were caught simply because the build was successful.&lt;/p>
&lt;h2 id="the-bug">The Bug&lt;/h2>
&lt;p>Python doesn&amp;rsquo;t require you to specify a return value. In fact, you can have a function that may not explicitly return at all. Since Python is a scripting language, it will automatically return when it hits the bottom of the function being called. When this happens without returning a specific value, any variable assigned to the function call will be &lt;code>None&lt;/code>. A silly but illustrating example:&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-code=" data-lang="code=">def change_string(do_it: bool) -&amp;gt; str:
if do_it:
return &amp;#34;changed!&amp;#34;
&lt;/code>&lt;/pre>&lt;p>This function accepts a boolean that determines whether to do anything at all. According to the type hints and the function name, a string is the expected return type. You can assign the output of this function to a variable like normal:&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-code=" data-lang="code=">my_string = change_string(False)
&lt;/code>&lt;/pre>&lt;p>However, since the argument to &lt;code>change_string&lt;/code> is &lt;code>False&lt;/code>, the assignment will suffer from this bug. There is no return statement for a fasly &lt;code>do_it&lt;/code> condition, so when Python reaches the end of the function it will have no choice but to return &lt;code>None&lt;/code>. You can confirm the assignment by printing the value and type of &lt;code>my_string&lt;/code>:&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-code=" data-lang="code=">print(my_string)
print(type(my_string))
&amp;gt; None
&amp;gt; &amp;lt;class &amp;#39;NoneType&amp;#39;&amp;gt;
&lt;/code>&lt;/pre>&lt;h2 id="lesson-learned">Lesson Learned&lt;/h2>
&lt;p>We switched to Go for the concurrency benefits but also the type system and compiler helps save us from these runtime errors. The same function in Go would result in a compile time error:&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-code=" data-lang="code=">func changeString(doIt bool) string {
if doIt {
return &amp;#34;Changed!&amp;#34;
}
}
func main() {
s := changeString(false)
fmt.Println(s)
}
&amp;gt; go run main.go
&amp;gt; ./main.go:10:1: missing return
&lt;/code>&lt;/pre>&lt;p>This Python service isn&amp;rsquo;t a candidate for rewriting in Go any time soon. Remembering to be more thorough in my code review and testing would have saved me from an embarrassing run time error that had some client impact today.&lt;/p></content></item><item><title>Contact</title><link>https://williamcook.dev/contact/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://williamcook.dev/contact/</guid><description>&lt;h1 id="get-in-touch">Get In Touch&lt;/h1>
&lt;ul>
&lt;li>&lt;a href="https://linkedin.com/in/wgeorgecook">LinkedIn&lt;/a>&lt;/li>
&lt;li>&lt;a href="mailto:web@williamcook.dev">Email&lt;/a>&lt;/li>
&lt;/ul></description><content>&lt;h1 id="get-in-touch">Get In Touch&lt;/h1>
&lt;ul>
&lt;li>&lt;a href="https://linkedin.com/in/wgeorgecook">LinkedIn&lt;/a>&lt;/li>
&lt;li>&lt;a href="mailto:web@williamcook.dev">Email&lt;/a>&lt;/li>
&lt;/ul></content></item><item><title>Highlighted Works</title><link>https://williamcook.dev/showcase/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://williamcook.dev/showcase/</guid><description>&lt;h1 id="charity-yeti">Charity Yeti&lt;/h1>
&lt;p>&lt;img src="https://williamcook.dev/img/logo.png" alt="Charity Yeti" title="Charity Yeti logo, with &amp;#39;Charity&amp;#39; in purple with a yellow heart dotting the &amp;#39;i&amp;#39;, and &amp;#39;Yeti&amp;#39; in yellow with a purple heart dotting the &amp;#39;i&amp;#39;.">&lt;/p>
&lt;p>&lt;a href="https://github.com/wgeorgecook/charityyeti">Charity Yeti&lt;/a> aims to raise money for the &lt;a href="https://www.pih.org/maternal-center-excellence?form=hankandjohn">Partner&amp;rsquo;s In Health maternal center of excellency in Sierra Leone&lt;/a>. What began as a &lt;a href="https://twitter.com/hankgreen/status/1186824079120011264">Tweet from Hank Green&lt;/a> is growing to a platform that allows Twitter users to contribute to ending infant and mother mortality in Sierra Leone.&lt;/p></description><content>&lt;h1 id="charity-yeti">Charity Yeti&lt;/h1>
&lt;p>&lt;img src="https://williamcook.dev/img/logo.png" alt="Charity Yeti" title="Charity Yeti logo, with &amp;#39;Charity&amp;#39; in purple with a yellow heart dotting the &amp;#39;i&amp;#39;, and &amp;#39;Yeti&amp;#39; in yellow with a purple heart dotting the &amp;#39;i&amp;#39;.">&lt;/p>
&lt;p>&lt;a href="https://github.com/wgeorgecook/charityyeti">Charity Yeti&lt;/a> aims to raise money for the &lt;a href="https://www.pih.org/maternal-center-excellence?form=hankandjohn">Partner&amp;rsquo;s In Health maternal center of excellency in Sierra Leone&lt;/a>. What began as a &lt;a href="https://twitter.com/hankgreen/status/1186824079120011264">Tweet from Hank Green&lt;/a> is growing to a platform that allows Twitter users to contribute to ending infant and mother mortality in Sierra Leone.&lt;/p>
&lt;h1 id="meet-needs">Meet Needs&lt;/h1>
&lt;p>&lt;a href="https://github.com/wgeorgecook/meetneeds">Meet Needs&lt;/a> is a community broker program that allows for basic moderation. Through Meet Needs, people can submit needs they need met with contact information that is only available to the moderator, and the need itself is posted to the community Needs Board. People can volunteer to meet a need, and send their contact information to the moderator. The goal here is for the moderators to verify both need makers and need fulfillers and connect the two parties.&lt;/p>
&lt;h1 id="carb-counter">Carb Counter&lt;/h1>
&lt;p>&lt;a href="https://github.com/wgeorgecook/carbCounter">Carb Counter&lt;/a> is a nutritional database program that allows users to keep a bank of their common dietary items and search through them to add up the amount of carbs they&amp;rsquo;ve consumed.&lt;/p>
&lt;h1 id="github">Github&lt;/h1>
&lt;p>You can see more of my little projects and open source contributions on my &lt;a href="https://github.com/wgeorgecook">Github&lt;/a>&lt;/p></content></item></channel></rss>