<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Go on</title><link>https://williamcook.dev/tags/go/</link><description>Recent content in Go on</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Mon, 30 Dec 2024 20:24:38 -0500</lastBuildDate><atom:link href="https://williamcook.dev/tags/go/index.xml" rel="self" type="application/rss+xml"/><item><title>Go Http Mocks and Testing</title><link>https://williamcook.dev/posts/go-http-mocks-and-testing/</link><pubDate>Mon, 30 Dec 2024 20:24:38 -0500</pubDate><guid>https://williamcook.dev/posts/go-http-mocks-and-testing/</guid><description>&lt;h1 id="testing-http-endpoints">Testing HTTP Endpoints&lt;/h1>
&lt;p>Over Christmas I decided to do a small dive into HTTP testing in Go after discovering the &lt;a href="https://pkg.go.dev/net/http/httptest">net/http/httptest library&lt;/a> while writing my &lt;a href="#ZgotmplZ">Go Ignite Talk&lt;/a>.&lt;/p>
&lt;h1 id="the-code">The Code&lt;/h1>
&lt;p>The code discussed here is from &lt;a href="https://github.com/wgeorgecook/http-testing/tree/main">my Github repository&lt;/a>. All of the code there is pretty well documented and if you have a good understanding of &lt;a href="https://williamcook.dev/posts/botanical_exploration_of_abstract_types_in_go/">Go interfaces&lt;/a> and patterns (factory and dependency injection specifically) you would do well to read the code rather than this post.&lt;/p></description><content>&lt;h1 id="testing-http-endpoints">Testing HTTP Endpoints&lt;/h1>
&lt;p>Over Christmas I decided to do a small dive into HTTP testing in Go after discovering the &lt;a href="https://pkg.go.dev/net/http/httptest">net/http/httptest library&lt;/a> while writing my &lt;a href="#ZgotmplZ">Go Ignite Talk&lt;/a>.&lt;/p>
&lt;h1 id="the-code">The Code&lt;/h1>
&lt;p>The code discussed here is from &lt;a href="https://github.com/wgeorgecook/http-testing/tree/main">my Github repository&lt;/a>. All of the code there is pretty well documented and if you have a good understanding of &lt;a href="https://williamcook.dev/posts/botanical_exploration_of_abstract_types_in_go/">Go interfaces&lt;/a> and patterns (factory and dependency injection specifically) you would do well to read the code rather than this post.&lt;/p>
&lt;h2 id="testing-the-api-server">Testing the API Server&lt;/h2>
&lt;p>First, let&amp;rsquo;s examine the HTTP server tests. You can find the handler in &lt;code>http-testing/internal/pkg/server/handlers.go&lt;/code>. The code is very straightforward.&lt;/p>
&lt;pre tabindex="0">&lt;code>func getResourceHandler(w http.ResponseWriter, req *http.Request) {
idCheck, ok := req.URL.Query()[&amp;#34;id&amp;#34;]
if !ok || idCheck[0] == &amp;#34;&amp;#34; {
http.Error(w, errs.ErrIdRequired.Error(), http.StatusBadRequest)
return
}
id := idCheck[0]
if id == &amp;#34;3&amp;#34; {
http.Error(w, errs.ErrIdNotFound.Error(), http.StatusNotFound)
return
}
r := resources.Resource{ID: id}
rBytes, err := json.Marshal(r)
if err != nil {
http.Error(w, err.Error(), http.StatusInternalServerError)
}
w.Header().Set(&amp;#34;Content-Type&amp;#34;, &amp;#34;application/json&amp;#34;)
written, err := w.Write(rBytes)
if err != nil {
http.Error(w, err.Error(), http.StatusInternalServerError)
return
}
w.Header().Set(&amp;#34;Content-Length&amp;#34;, strconv.Itoa(written))
return
}
&lt;/code>&lt;/pre>&lt;p>Of note, it&lt;/p>
&lt;ol>
&lt;li>Ensures that a &lt;code>id&lt;/code> query parameter was passed in on the request.&lt;/li>
&lt;li>Returns &lt;code>HTTP NOT FOUND&lt;/code> if the ID provided is specifically 3.&lt;/li>
&lt;li>Returns the resource with any other ID.&lt;/li>
&lt;/ol>
&lt;h3 id="http-test">HTTP Test&lt;/h3>
&lt;p>Using the standard library tool &lt;code>net/http/httptest&lt;/code>, I am able to record a mock request. The action happens in this function found in &lt;code>http-testing/internal/pkg/server/handlers_test.go&lt;/code>&lt;/p>
&lt;pre tabindex="0">&lt;code>var getResp = func(id string) (*http.Response, []byte) {
req := httptest.NewRequest(&amp;#34;GET&amp;#34;, &amp;#34;http://example.com/api/v1/resources?id=&amp;#34;+id, nil)
w := httptest.NewRecorder()
getResourceHandler(w, req)
resp := w.Result()
defer resp.Body.Close()
body, _ := io.ReadAll(resp.Body)
return resp, body
}
&lt;/code>&lt;/pre>&lt;p>In ~10 lines of code I&amp;rsquo;m able to call the handler with whatever data I want to pass into it and get an &lt;code>*http.Response&lt;/code> and &lt;code>[]byte&lt;/code> back to unmarshal into whatever object I need to. No custom impmentation needed on this side! I&amp;rsquo;ll leave it as an exercise to the reader to check out the actual test cases and see how I am asserting the data my handler returns is correct.&lt;/p>
&lt;h2 id="testing-the-api-consumer">Testing the API Consumer&lt;/h2>
&lt;p>The API consumer is responsible for actually making network requests, so testing it&amp;rsquo;s behavior is a little more complicated. The first step to success is using &lt;a href="https://www.freecodecamp.org/news/a-quick-intro-to-dependency-injection-what-it-is-and-when-to-use-it-7578c84fa88f/">dependency injection&lt;/a> via a provided HTTP client. So let&amp;rsquo;s take a look at the &lt;code>api.Client&lt;/code>.&lt;/p>
&lt;pre tabindex="0">&lt;code>// Client is the default way to interact with
// the API SDK. Requests to the remote endpoints
// are made via the HttpClient provided.
type Client struct {
HttpClient HttpClient
}
&lt;/code>&lt;/pre>&lt;p>&lt;code>api.Client&lt;/code> requires an &lt;code>HttpClient&lt;/code>, which we descibe as an interface with a &lt;code>Get&lt;/code> method.&lt;/p>
&lt;pre tabindex="0">&lt;code>// HttpClient is an interface that partially
// supports the http.Client interface and
// allows mocking requests made on it.
type HttpClient interface {
Get(url string) (resp *http.Response, err error)
}
&lt;/code>&lt;/pre>&lt;p>Since the &lt;a href="https://pkg.go.dev/net/http#Client.Get">http.Client&lt;/a> satisfies this, we can always pass in that when constructing a new Client. But it leaves the option to allow the consumer to pass in something more custom. This is exactly how we are able to test this.&lt;/p>
&lt;h3 id="mocking-requests">Mocking Requests&lt;/h3>
&lt;p>A custom struct that satisfies the &lt;code>HttpClient&lt;/code> interface is tucked away in &lt;code>http-testing/internal/pkg/utils/mocks/httpClientMock.go&lt;/code>.&lt;/p>
&lt;pre tabindex="0">&lt;code>// HTTPClientMock is the type that receives requests
// during the tests for an api.Client.
type HTTPClientMock struct{}
// Get implements the api.HttpClient interface and
// receives requests made by the api.Client when
// client.HttpClient.Get is called.
// Note: Specific behaviors expected from the
// remote endpoint MUST be updated or implemented
// in this function for the tests to remain valid.
func (c *HTTPClientMock) Get(endpoint string) (*http.Response, error) {
fullUrl, err := url.Parse(endpoint)
if err != nil {
return nil, err
}
id := fullUrl.Query().Get(&amp;#34;id&amp;#34;)
switch id {
case &amp;#34;&amp;#34;:
return &amp;amp;http.Response{
StatusCode: http.StatusBadRequest,
Body: io.NopCloser(strings.NewReader(errs.ErrIdRequired.Error())),
}, errs.ErrIdRequired
case &amp;#34;1&amp;#34;:
return &amp;amp;http.Response{
StatusCode: http.StatusOK,
Body: io.NopCloser(strings.NewReader(MockResourseId1)),
}, nil
case &amp;#34;3&amp;#34;:
return &amp;amp;http.Response{
StatusCode: http.StatusNotFound,
Body: io.NopCloser(strings.NewReader(errs.ErrIdNotFound.Error())),
}, errs.ErrIdNotFound
}
return &amp;amp;http.Response{StatusCode: http.StatusNotImplemented}, errs.ErrUnimplemented
}
&lt;/code>&lt;/pre>&lt;p>When testing the client, all of the expected behavior must be implemented in this &lt;code>HTTPClientMock.Get()&lt;/code> function. Notice here that things are exactly as you would expect if you read the tests from the API server. An &lt;code>id&lt;/code> query param is required, but any time &lt;code>id=3&lt;/code> is provided you&amp;rsquo;ll get an &lt;code>HTTP NOT FOUND&lt;/code> status code back. Try and understand how this client hijacks the requests made in the &lt;code>client.GetResourceByID()&lt;/code> request via dependency injection as I mentioned above. You can find the tests in &lt;code>http-testing/internal/pkg/api/http_test.go&lt;/code>.&lt;/p>
&lt;h1 id="in-closing">In Closing&lt;/h1>
&lt;p>This is a &lt;em>very brief, very contrived&lt;/em> way to get some HTTP tests done for your API servers and your consumers. I encourage you to use this as a baseline and try and implement mock tests in your own code. Experiment and really understand how things work under the hood and I&amp;rsquo;m sure your own code quality will get better as a side effect!&lt;/p></content></item><item><title>Why Go Ignite Talk</title><link>https://williamcook.dev/posts/why-go-ignite-talk/</link><pubDate>Thu, 19 Dec 2024 14:29:05 -0500</pubDate><guid>https://williamcook.dev/posts/why-go-ignite-talk/</guid><description>&lt;h1 id="why-go">Why Go?&lt;/h1>
&lt;p>This is less a blog post and more a repository for my slides.&lt;/p>
&lt;h2 id="background">Background&lt;/h2>
&lt;p>I gave this talk on December 18th 2024 at the &lt;a href="https://orlandodevs.com">Orlando Devs&lt;/a> Holiday Party.&lt;/p>
&lt;h2 id="some-notes">Some Notes&lt;/h2>
&lt;p>As these are just the slides, you&amp;rsquo;re going to miss most of the content of the talk. But know
that this is a very cursory introduction to Go. All of what I cover and more can be discovered
on the &lt;a href="https://go.dev/tour/welcome/1">Tour of Go&lt;/a>. I wholly recommend you spend half an hour
or so to complete that if you are interested in learning more about the Go syntax and features.&lt;/p></description><content>&lt;h1 id="why-go">Why Go?&lt;/h1>
&lt;p>This is less a blog post and more a repository for my slides.&lt;/p>
&lt;h2 id="background">Background&lt;/h2>
&lt;p>I gave this talk on December 18th 2024 at the &lt;a href="https://orlandodevs.com">Orlando Devs&lt;/a> Holiday Party.&lt;/p>
&lt;h2 id="some-notes">Some Notes&lt;/h2>
&lt;p>As these are just the slides, you&amp;rsquo;re going to miss most of the content of the talk. But know
that this is a very cursory introduction to Go. All of what I cover and more can be discovered
on the &lt;a href="https://go.dev/tour/welcome/1">Tour of Go&lt;/a>. I wholly recommend you spend half an hour
or so to complete that if you are interested in learning more about the Go syntax and features.&lt;/p>
&lt;h2 id="following-up">Following Up&lt;/h2>
&lt;p>Please reach out if you want to learn more about Go or talk about Go-related things! The best
way is to &lt;a href="https://www.linkedin.com/in/wgeorgecook/">connect with me on LinkedIn&lt;/a>.&lt;/p>
&lt;h2 id="the-slides">The Slides&lt;/h2>
&lt;p>Here are my slides! The Gopher photos in the Mascot slide were taken from the &lt;a href="https://go.dev/blog/gopher">Go blog&lt;/a> and the
backgrounds were made in &lt;a href="https://www.photopea.com/">Photopea&lt;/a> using &lt;a href="https://scrapbox.io/icons/golang">this image&lt;/a> I found online.&lt;/p>
&lt;div class="image-gallery">
&lt;img src="https://williamcook.dev/img/why-go/01-why-go.png" alt="01-why-go.png">
&lt;img src="https://williamcook.dev/img/why-go/02-why-go.png" alt="02-why-go.png">
&lt;img src="https://williamcook.dev/img/why-go/03-why-go.png" alt="03-why-go.png">
&lt;img src="https://williamcook.dev/img/why-go/04-why-go.png" alt="04-why-go.png">
&lt;img src="https://williamcook.dev/img/why-go/05-why-go.png" alt="05-why-go.png">
&lt;img src="https://williamcook.dev/img/why-go/06-why-go.png" alt="06-why-go.png">
&lt;img src="https://williamcook.dev/img/why-go/07-why-go.png" alt="07-why-go.png">
&lt;img src="https://williamcook.dev/img/why-go/08-why-go.png" alt="08-why-go.png">
&lt;img src="https://williamcook.dev/img/why-go/09-why-go.png" alt="09-why-go.png">
&lt;img src="https://williamcook.dev/img/why-go/10-why-go.png" alt="10-why-go.png">
&lt;img src="https://williamcook.dev/img/why-go/11-why-go.png" alt="11-why-go.png">
&lt;img src="https://williamcook.dev/img/why-go/12-why-go.png" alt="12-why-go.png">
&lt;img src="https://williamcook.dev/img/why-go/13-why-go.png" alt="13-why-go.png">
&lt;img src="https://williamcook.dev/img/why-go/14-why-go.png" alt="14-why-go.png">
&lt;img src="https://williamcook.dev/img/why-go/15-why-go.png" alt="15-why-go.png">
&lt;img src="https://williamcook.dev/img/why-go/16-why-go.png" alt="16-why-go.png">
&lt;img src="https://williamcook.dev/img/why-go/17-why-go.png" alt="17-why-go.png">
&lt;img src="https://williamcook.dev/img/why-go/18-why-go.png" alt="18-why-go.png">
&lt;img src="https://williamcook.dev/img/why-go/19-why-go.png" alt="19-why-go.png">
&lt;img src="https://williamcook.dev/img/why-go/20-why-go.png" alt="20-why-go.png">
&lt;/div></content></item><item><title>Goroutines in a Mine</title><link>https://williamcook.dev/posts/goroutines-in-a-mine/</link><pubDate>Sun, 22 Sep 2024 22:02:04 -0400</pubDate><guid>https://williamcook.dev/posts/goroutines-in-a-mine/</guid><description>&lt;h1 id="a-canary-in-a-gem-mine">A Canary? In a Gem Mine?&lt;/h1>
&lt;p>Goroutines are, for me, &lt;em>the killer feature of Go&lt;/em>. Asynchronous communication between isolated, concurrent workloads was the use case that made me a Go developer. It&amp;rsquo;s a complex topic, and it can be really easy to do improperly. Heck, I even had to give this little projects a few good go overs to make the example correct.&lt;/p>
&lt;h2 id="concurrent-work">Concurrent work?&lt;/h2>
&lt;p>Concurrency is the ability of a program to do a collective piece of work in chunks. Some pieces of that work take longer than others, and sometimes the order in which work is performed does not matter. We can use Goroutines to piece out this work, letting the scheduler start and stop processes as necessary. If you would like some very Go-specific information about the language implementation of concurrency, I &lt;em>highly&lt;/em> recommend reading the &lt;a href="https://go.dev/doc/effective_go#concurrency">Concurrency section of &lt;em>Effective Go&lt;/em> on go.dev&lt;/a>.&lt;/p></description><content>&lt;h1 id="a-canary-in-a-gem-mine">A Canary? In a Gem Mine?&lt;/h1>
&lt;p>Goroutines are, for me, &lt;em>the killer feature of Go&lt;/em>. Asynchronous communication between isolated, concurrent workloads was the use case that made me a Go developer. It&amp;rsquo;s a complex topic, and it can be really easy to do improperly. Heck, I even had to give this little projects a few good go overs to make the example correct.&lt;/p>
&lt;h2 id="concurrent-work">Concurrent work?&lt;/h2>
&lt;p>Concurrency is the ability of a program to do a collective piece of work in chunks. Some pieces of that work take longer than others, and sometimes the order in which work is performed does not matter. We can use Goroutines to piece out this work, letting the scheduler start and stop processes as necessary. If you would like some very Go-specific information about the language implementation of concurrency, I &lt;em>highly&lt;/em> recommend reading the &lt;a href="https://go.dev/doc/effective_go#concurrency">Concurrency section of &lt;em>Effective Go&lt;/em> on go.dev&lt;/a>.&lt;/p>
&lt;h2 id="a-refresher">A refresher&lt;/h2>
&lt;p>This code (found in my &lt;a href="https://github.com/wgeorgecook/goroutines-in-a-mine">Github repo here&lt;/a>) utilizes interfaces in a similar way I explained in &lt;a href="https://williamcook.dev/posts/botanical_exploration_of_abstract_types_in_go/">my botanical exploration of abstract types in Go&lt;/a> blog post. There is also code generated via &lt;code>go:generate&lt;/code> comments. Which you can learn more about &lt;a href="https://williamcook.dev/posts/go_generate_protobuf/">in my post about using Go Generate for Protobuf&lt;/a>. Neither of those are required reading, but can help you understand the code a little better if some of these topics are a little foreign to you.&lt;/p>
&lt;h2 id="more-than-one-way-to-mine-some-diamonds">More Than One Way to Mine Some Diamonds&lt;/h2>
&lt;p>If you&amp;rsquo;ve ever spent several days mining some land under your base in &lt;em>Minecraft&lt;/em>, then you know there&amp;rsquo;s lots of different ways to get those diamonds. You can dig some nice long strips running parallel to catch as much at one level as you want. You can find a cave system and go spellunking until you happen upon a diamond vein. You can load up on TNT and blow up everything within a couple of chunks and catch what&amp;rsquo;s left over. You can group up with friends. You can take some solo time. It doesn&amp;rsquo;t matter how the diamonds are found, it only matters that they are.&lt;/p>
&lt;h2 id="worker-patterns-in-go">Worker Patterns in Go&lt;/h2>
&lt;p>Many times you want to implement the same pattern in your program. You can have a stream of work and you need to make a few different database calls to build a response. Some data from Mongo, a little bit of Postgres. Grab some data from an S3 bucket. Whatever! The pieces are entirely independent of each other, so they don&amp;rsquo;t need to wait for each other to complete before another can start working again. Now, if you will excuse my brief foray into practicallity, we can resume the contriving.&lt;/p>
&lt;h2 id="high-ho">High Ho!&lt;/h2>
&lt;p>Let&amp;rsquo;s look at some code.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">init&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">inChan&lt;/span> = make(&lt;span style="color:#a6e22e">channeling&lt;/span>.&lt;span style="color:#a6e22e">InputChan&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">errChan&lt;/span> = make(&lt;span style="color:#a6e22e">channeling&lt;/span>.&lt;span style="color:#a6e22e">ErrChan&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">doneChan&lt;/span> = make(&lt;span style="color:#66d9ef">chan&lt;/span> &lt;span style="color:#66d9ef">bool&lt;/span>, &lt;span style="color:#ae81ff">1&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">workChan&lt;/span> = make(&lt;span style="color:#66d9ef">chan&lt;/span> &lt;span style="color:#66d9ef">bool&lt;/span>, &lt;span style="color:#ae81ff">1&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>In the &lt;code>init&lt;/code> function, I create several channels. Channels are the way Goroutines communicate with each other. If you can tell from the context, these are channels for input workers, error reporting, to indicate when work is done, and work to do. The channels are empty though, so let&amp;rsquo;s fill them up.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#a6e22e">_&lt;/span>, &lt;span style="color:#a6e22e">name&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#66d9ef">range&lt;/span> &lt;span style="color:#a6e22e">names&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">inChan&lt;/span> &lt;span style="color:#f92672">&amp;lt;-&lt;/span> &lt;span style="color:#a6e22e">worker&lt;/span>.&lt;span style="color:#a6e22e">New&lt;/span>(&lt;span style="color:#a6e22e">name&lt;/span>, &lt;span style="color:#a6e22e">workChan&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The syntax is pretty simple:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">chanToReceive&lt;/span> &lt;span style="color:#f92672">&amp;lt;-&lt;/span> &lt;span style="color:#a6e22e">thingToSend&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Similarly, we can read from channels in a loop. Let&amp;rsquo;s examine the &lt;code>channeling&lt;/code> package.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">Process&lt;/span>(&lt;span style="color:#a6e22e">inChan&lt;/span> &lt;span style="color:#a6e22e">InputChan&lt;/span>, &lt;span style="color:#a6e22e">errChan&lt;/span> &lt;span style="color:#a6e22e">ErrChan&lt;/span>, &lt;span style="color:#a6e22e">done&lt;/span> &lt;span style="color:#a6e22e">DoneChan&lt;/span>, &lt;span style="color:#a6e22e">workChan&lt;/span> &lt;span style="color:#a6e22e">WorkChan&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">doWork&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#66d9ef">func&lt;/span>(&lt;span style="color:#a6e22e">i&lt;/span> &lt;span style="color:#a6e22e">Input&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">i&lt;/span>.&lt;span style="color:#a6e22e">DoWork&lt;/span>(); &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">errChan&lt;/span> &lt;span style="color:#f92672">&amp;lt;-&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">log&lt;/span>.&lt;span style="color:#a6e22e">Println&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Process is listening...&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">doneCounter&lt;/span> = &lt;span style="color:#ae81ff">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">select&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">case&lt;/span> &lt;span style="color:#a6e22e">i&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#f92672">&amp;lt;-&lt;/span>&lt;span style="color:#a6e22e">inChan&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">go&lt;/span> &lt;span style="color:#a6e22e">doWork&lt;/span>(&lt;span style="color:#a6e22e">i&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">case&lt;/span> &lt;span style="color:#f92672">&amp;lt;-&lt;/span>&lt;span style="color:#a6e22e">workChan&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">doneCounter&lt;/span>&lt;span style="color:#f92672">++&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">doneCounter&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#ae81ff">7&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">done&lt;/span> &lt;span style="color:#f92672">&amp;lt;-&lt;/span> &lt;span style="color:#66d9ef">true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>To read from a channel, you can either assign it using the walrus or use it a signal. In either case, you&amp;rsquo;ll want a &lt;code>select&lt;/code> (if reading from multiple channels) or use &lt;code>range&lt;/code> on a single channel.&lt;/p>
&lt;h2 id="off-to-work-we-go">Off to Work We Go&lt;/h2>
&lt;p>A keen observer noticed that &lt;code>Process&lt;/code> function above reads from the &lt;code>inChan&lt;/code> and assigns it to &lt;code>i&lt;/code>. It then calls &lt;code>doWork&lt;/code> passing &lt;code>i&lt;/code> in as an argument. But we do something special with this function call. It&amp;rsquo;s all about those two magic letters &lt;code>g&lt;/code> and &lt;code>o&lt;/code>. Goroutines are spawned when you call a function (either named or anonymous) using the &lt;code>go&lt;/code> keyword. When a function is called this way, the work is passed off to the scheduler and it unblocks the function it was called from. In the instances of our hard working dwarfs, their work takes an arbitrary amount of time.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">d&lt;/span> &lt;span style="color:#a6e22e">Dwarf&lt;/span>) &lt;span style="color:#a6e22e">DoWork&lt;/span>() &lt;span style="color:#66d9ef">error&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">d&lt;/span>.&lt;span style="color:#a6e22e">logStep&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;doing some work!&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">defer&lt;/span> &lt;span style="color:#a6e22e">d&lt;/span>.&lt;span style="color:#a6e22e">sendDone&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">randTime&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">rand&lt;/span>.&lt;span style="color:#a6e22e">Int&lt;/span>() &lt;span style="color:#f92672">%&lt;/span> &lt;span style="color:#ae81ff">100&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">time&lt;/span>.&lt;span style="color:#a6e22e">Sleep&lt;/span>(&lt;span style="color:#a6e22e">time&lt;/span>.&lt;span style="color:#a6e22e">Duration&lt;/span>(&lt;span style="color:#a6e22e">randTime&lt;/span>&lt;span style="color:#f92672">/&lt;/span>&lt;span style="color:#ae81ff">5&lt;/span>) &lt;span style="color:#f92672">*&lt;/span> &lt;span style="color:#a6e22e">time&lt;/span>.&lt;span style="color:#a6e22e">Second&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">randTime&lt;/span>&lt;span style="color:#f92672">%&lt;/span>&lt;span style="color:#ae81ff">2&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">d&lt;/span>.&lt;span style="color:#a6e22e">Error&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">d&lt;/span>.&lt;span style="color:#a6e22e">logStep&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;success!&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Without using Goroutines, all of this sleepiness could prevent other dwarves from completing their work in a timely manner!&lt;/p>
&lt;h2 id="synchronous-but-with-extra-steps">Synchronous, But With Extra Steps&lt;/h2>
&lt;p>It&amp;rsquo;s important to test your application and ensure that you have the right code design. You could very likely be implenting a purely synchronous workflow by missing a goroutine, or by locking until one goroutine exits. On the other end, you could get deadlock by preventing your goroutines from exiting (but keeping them alive)!&lt;/p>
&lt;h2 id="raise-your-own-pickaxe">Raise Your Own Pickaxe&lt;/h2>
&lt;p>There&amp;rsquo;s enough code in this repo for you to see how to handle error reporting when doing work in goroutines. You can implement contexts to end work early if it&amp;rsquo;s not needed anymore. Explore how you can use a &lt;code>sync.WaitGroup&lt;/code> to handle the blocking. Thinking in asynchronous processes requires a bit of a paradigm shift. Build the program (&lt;code>go build .&lt;/code> or &lt;code>go run main.go&lt;/code>) and watch the work queue up and finish in a non-deterministic way. So please experiment and discover what treasures await to those willing to venture the depths of this mine 💎&lt;/p></content></item><item><title>Botanical_exploration_of_abstract_types_in_go</title><link>https://williamcook.dev/posts/botanical_exploration_of_abstract_types_in_go/</link><pubDate>Wed, 04 Sep 2024 20:42:44 -0400</pubDate><guid>https://williamcook.dev/posts/botanical_exploration_of_abstract_types_in_go/</guid><description>&lt;h1 id="a-forest-full-of-trees">A Forest Full of Trees&lt;/h1>
&lt;p>Are you a Go developer who wants a solid reference for how interfaces and struct composition work? Look no further! Inside the &lt;a href="https://github.com/wgeorgecook/interforestaces">code sample on GitHub&lt;/a> are a few submodules you might find handy. Feel free to open up that repo, but we will be referencing code from it here directly.&lt;/p>
&lt;h2 id="inter-forest-aces">Inter-forest-aces&lt;/h2>
&lt;p>An interface in Go is an abstract type. That is, it describes something without actually embodying the thing itself. Interfaces take this shape:&lt;/p></description><content>&lt;h1 id="a-forest-full-of-trees">A Forest Full of Trees&lt;/h1>
&lt;p>Are you a Go developer who wants a solid reference for how interfaces and struct composition work? Look no further! Inside the &lt;a href="https://github.com/wgeorgecook/interforestaces">code sample on GitHub&lt;/a> are a few submodules you might find handy. Feel free to open up that repo, but we will be referencing code from it here directly.&lt;/p>
&lt;h2 id="inter-forest-aces">Inter-forest-aces&lt;/h2>
&lt;p>An interface in Go is an abstract type. That is, it describes something without actually embodying the thing itself. Interfaces take this shape:&lt;/p>
&lt;pre tabindex="0">&lt;code>type someIFace interface {
someMethod() string
someOtherMethod() int
}
&lt;/code>&lt;/pre>&lt;p>Notice that in &lt;code>someIFace&lt;/code>, there are two methods. One returns a string, and another an int. This is helpful if you want a function that operates on types, but you want to adapt what those types are situationally. To put it into context, take the interface from &lt;code>package trees&lt;/code>.&lt;/p>
&lt;pre tabindex="0">&lt;code>// ITree describes an abstract tree
type ITree interface {
GetCategory() string
GetGenus() string
GetSpecies() string
GetCommonName() string
Spring() string
Summer() string
Fall() string
Winter() string
}
&lt;/code>&lt;/pre>&lt;p>The interface says &lt;em>nothing&lt;/em> about any particular tree. It just defines how a concrete tree will describe itself. Some of these methods are &lt;em>implemented&lt;/em> (that is to say, these methods exist) on the concrete type &lt;code>Tree&lt;/code>.&lt;/p>
&lt;pre tabindex="0">&lt;code>// Tree is a concrete structure to build a Tree with.
type Tree struct {
genus, species, commonName string
}
// GetGenus returns the genus of the receiving tree.
func (t Tree) GetGenus() string {
return t.genus
}
// GetSpecies returns the species of the receiving tree.
func (t Tree) GetSpecies() string {
return t.species
}
// GetCommonName returns the common name of the receiving tree.
func (t Tree) GetCommonName() string {
return t.commonName
}
&lt;/code>&lt;/pre>&lt;p>However, since &lt;code>Tree&lt;/code> doesn&amp;rsquo;t implement every method of &lt;code>ITree&lt;/code>, it does not &lt;em>satisfy&lt;/em> the interface.&lt;/p>
&lt;h2 id="growing-some-deeper-roots">Growing some deeper roots&lt;/h2>
&lt;p>While a &lt;code>Tree&lt;/code> implements some of the methods that &lt;code>ITree&lt;/code> requires, the methods related to the seaons are left unsatisfied. This is where both packages &lt;code>deciduous&lt;/code> and &lt;code>conifer&lt;/code> come into play.&lt;/p>
&lt;h3 id="planting-a-seed-or-a-struct">Planting a seed (or a struct)&lt;/h3>
&lt;p>If you come from another language, you might be familiar with &lt;em>inheritance&lt;/em>. This is the idea that something (usually a &lt;em>class&lt;/em>) can pass down properties to other things (often called their children). The thing receiving these properties is &lt;em>inheriting&lt;/em> those from its parent. Go doesn&amp;rsquo;t strictly have this, but we have something close called &lt;em>embedding&lt;/em>. When we embed a struct into another, all of the properties of the outer struct are passed down to the struct doing the embedding. Here, both &lt;code>Conifer&lt;/code> and &lt;code>Deciduous&lt;/code> embed the &lt;code>Trees&lt;/code> struct.&lt;/p>
&lt;pre tabindex="0">&lt;code>package conifer
// Confier is type of tree. All fields are
// composed of the Tree type from the trees package.
type Conifer struct {
trees.Tree
}
&lt;/code>&lt;/pre>&lt;pre tabindex="0">&lt;code>package deciduous
// Deciduous is type of tree. All fields are
// composed of the Tree type from the trees package.
type Deciduous struct {
trees.Tree
}
&lt;/code>&lt;/pre>&lt;p>Since the &lt;code>trees.Tree&lt;/code> struct has methods like &lt;code>GetCommonName&lt;/code> and properties like &lt;code>Genus&lt;/code> and &lt;code>Species&lt;/code>, these two structs do as well.&lt;/p>
&lt;h2 id="a-fork-in-the-road">A Fork in the Road&lt;/h2>
&lt;p>Conifers and deciduous trees have different lifecyles through. And they experience the turning of the seasons in very different ways. So we would not want them to receive those methods from a common &lt;code>Tree&lt;/code> ancestor. This is why we implement these methods separately for these two different categories of tree. For example:&lt;/p>
&lt;pre tabindex="0">&lt;code>package deciduous
// Spring returns a string representing the
// action deciduous trees take during spring.
func (d Deciduous) Spring() string {
return &amp;#34;Ahhh, new leaves and flowers!&amp;#34;
}
&lt;/code>&lt;/pre>&lt;pre tabindex="0">&lt;code>package conifer
// Spring returns a string representing the
// action conifers take during spring.
func (c Conifer) Spring() string {
return &amp;#34;Growing some cones!&amp;#34;
}
&lt;/code>&lt;/pre>&lt;p>Both of these methods reveal how both differing kinds of trees experience the same thing in their own special way.&lt;/p>
&lt;h2 id="bring-it-around-the-campfire">Bring it around the campfire&lt;/h2>
&lt;p>As previously mentioned, the real power of an abstract type is to pass it to a function that operates on interfaces. Take a look at the &lt;code>trees.Lifecycle&lt;/code> function.&lt;/p>
&lt;pre tabindex="0">&lt;code>package trees
// Lifecycle iterates over the methods found in ITree to describe
// the argument Tree and it&amp;#39;s life over one year.
func Lifecycle(t ITree) {
fmt.Println(&amp;#34;Hello! I am &amp;#34; + t.GetGenus() + &amp;#34; &amp;#34; + t.GetSpecies() + &amp;#34; (&amp;#34; + t.GetCommonName() + &amp;#34;), &amp;#34; + t.GetCategory() + &amp;#34; tree!&amp;#34;)
fmt.Println(&amp;#34;Today I am going through my lifecycle. Come grow with me!&amp;#34;)
fmt.Println(&amp;#34;It&amp;#39;s Spring! &amp;#34; + t.Spring())
fmt.Println(&amp;#34;Summertime! &amp;#34; + t.Summer())
fmt.Println(&amp;#34;Autumn is here. &amp;#34; + t.Fall())
fmt.Println(&amp;#34;Brrrr winter! &amp;#34; + t.Winter())
}
&lt;/code>&lt;/pre>&lt;p>&lt;code>Lifecycle&lt;/code> does one thing - it progresses through a year of whatever &lt;code>ITree&lt;/code> is passed into it. It does not care whether the &lt;code>ITree&lt;/code> is deciduous, a conifer, or a new, third type! But rather than having &lt;code>deciduous.Lifecycle&lt;/code> and &lt;code>conifer.Lifecycle&lt;/code>, you can have this one place to make these &lt;code>ITree&lt;/code>s grow. Now how neat is that?&lt;/p>
&lt;h2 id="the-wilderness-must-be-explored">The wilderness must be explored!&lt;/h2>
&lt;p>Have some fun with this. Create some new types of trees that implement the &lt;code>ITree&lt;/code> interface. Or maybe rename &lt;code>ITree&lt;/code> to &lt;code>IPlant&lt;/code> and create some &lt;code>vascular&lt;/code> and &lt;code>nonvascular&lt;/code> plant types and let &lt;code>deciduous&lt;/code> and &lt;code>conifer&lt;/code> embed those structs as necessary. Test yourself too. Knowing now what you do about interfaces, do you know why &lt;code>trees.New()&lt;/code> can&amp;rsquo;t be passed into the &lt;code>trees.Lifecycle()&lt;/code> function, but both a &lt;code>conifer.New()&lt;/code> and a &lt;code>deciduous.New()&lt;/code> can?&lt;/p></content></item><item><title>Go_generate_protobuf</title><link>https://williamcook.dev/posts/go_generate_protobuf/</link><pubDate>Tue, 03 Sep 2024 14:30:59 -0400</pubDate><guid>https://williamcook.dev/posts/go_generate_protobuf/</guid><description>&lt;h1 id="playground-for-go-generate-using-proto-files">Playground for Go Generate Using Proto Files&lt;/h1>
&lt;p>This is a small application to demonstrate how to use &lt;code>go generate&lt;/code> to compile proto files into Go code.&lt;/p>
&lt;p>Note: all code is available on GitHub &lt;a href="https://github.com/wgeorgecook/playgen">here&lt;/a>.&lt;/p>
&lt;h2 id="go-generate">Go Generate&lt;/h2>
&lt;p>The &lt;a href="https://go.dev/blog/generate">original blog post&lt;/a> by Rob Pike is well worth a read.
At the bottom, Rob says&lt;/p>
&lt;blockquote>
&lt;p>Please use go generate creatively. It’s there to encourage experimentation.&lt;/p>&lt;/blockquote>
&lt;p>This is one such experimentation.&lt;/p>
&lt;h2 id="protobuf-gprc-and-generating-code">Protobuf, gPRC, and Generating Code&lt;/h2>
&lt;p>If you are unfamiliar with &lt;a href="https://protobuf.dev/">Protocol Buffers&lt;/a> and &lt;a href="https://grpc.io/docs/languages/go/quickstart/">gRPC&lt;/a>, those linked resources are worth a read. However, just know that Protobuf is a language spec that allows you to define abstract API contracts within generated code stubs. Your application needs to implement these interfaces for clients to consume. The benefit is that both client and server consume and fulfill requests using the same base &lt;code>.proto&lt;/code> file and its generated code, allowing for incredible type safety.&lt;/p></description><content>&lt;h1 id="playground-for-go-generate-using-proto-files">Playground for Go Generate Using Proto Files&lt;/h1>
&lt;p>This is a small application to demonstrate how to use &lt;code>go generate&lt;/code> to compile proto files into Go code.&lt;/p>
&lt;p>Note: all code is available on GitHub &lt;a href="https://github.com/wgeorgecook/playgen">here&lt;/a>.&lt;/p>
&lt;h2 id="go-generate">Go Generate&lt;/h2>
&lt;p>The &lt;a href="https://go.dev/blog/generate">original blog post&lt;/a> by Rob Pike is well worth a read.
At the bottom, Rob says&lt;/p>
&lt;blockquote>
&lt;p>Please use go generate creatively. It’s there to encourage experimentation.&lt;/p>&lt;/blockquote>
&lt;p>This is one such experimentation.&lt;/p>
&lt;h2 id="protobuf-gprc-and-generating-code">Protobuf, gPRC, and Generating Code&lt;/h2>
&lt;p>If you are unfamiliar with &lt;a href="https://protobuf.dev/">Protocol Buffers&lt;/a> and &lt;a href="https://grpc.io/docs/languages/go/quickstart/">gRPC&lt;/a>, those linked resources are worth a read. However, just know that Protobuf is a language spec that allows you to define abstract API contracts within generated code stubs. Your application needs to implement these interfaces for clients to consume. The benefit is that both client and server consume and fulfill requests using the same base &lt;code>.proto&lt;/code> file and its generated code, allowing for incredible type safety.&lt;/p>
&lt;h2 id="protoc-hassles">Protoc Hassles&lt;/h2>
&lt;p>Go developers using Protobuf for a few years are probably familiar with the &lt;code>protoc&lt;/code> binary used and the &lt;code>protoc-gen-go&lt;/code> plugin. This is the tool we use to generate Go stubs from proto files. Protoc commands can be provided via scripts, in Dockerfiles, or ran directly to ensure that code is generated and types are accessible to your application. This decouples the proto compilation step from your app compilation. If you want to couple the two together, &lt;code>go generate&lt;/code> may be your answer.&lt;/p>
&lt;h1 id="go-generate-again">Go Generate (again)&lt;/h1>
&lt;p>The &lt;code>go generate&lt;/code> command searches through your Go files for the &lt;code>//go:generate&lt;/code> comment (notice no space between the slashes and &lt;code>go&lt;/code>). Adding this tag tells the Go toolchain to run whatever shell commends follow.&lt;/p>
&lt;h2 id="tagging-for-go-generate">Tagging for Go Generate&lt;/h2>
&lt;p>You can see here that &lt;code>main.go&lt;/code> has two go generate tags.&lt;/p>
&lt;pre tabindex="0">&lt;code>//go:generate protoc --go_out=. --go-grpc_out=. proto/helloapis/messages.proto
//go:generate protoc --go_out=. --go-grpc_out=. proto/helloapis/services.proto
&lt;/code>&lt;/pre>&lt;p>These two tags will compile protos found in &lt;code>proto/helloapis&lt;/code> and move them into the directory indicated by their package name. In this instance, that directory is &lt;code>gen/helloapis/v1&lt;/code>.&lt;/p>
&lt;h1 id="building-the-application">Building the Application&lt;/h1>
&lt;p>Attemping to run &lt;code>go build .&lt;/code> before compiling the protos will fail.&lt;/p>
&lt;blockquote>
&lt;p>❯ go build .
client/client.go:6:2: package playgen/gen/helloapis/v1 is not in std (/snap/go/10630/src/playgen/gen/helloapis/v1)&lt;/p>&lt;/blockquote>
&lt;p>To resolve this, run &lt;code>go generate ./...&lt;/code>.&lt;/p>
&lt;blockquote>
&lt;p>❯ go generate ./&amp;hellip;&lt;/p>&lt;/blockquote>
&lt;p>Notice that a new &lt;code>gen&lt;/code> directory is in the repo root.&lt;/p>
&lt;pre tabindex="0">&lt;code>❯ ls
build client docker-compose.yaml gen go.mod go.sum main.go proto README.md server
&lt;/code>&lt;/pre>&lt;p>The application is now buildable and runnable!&lt;/p>
&lt;pre tabindex="0">&lt;code>❯ go build .
❯ ls
build client docker-compose.yaml gen go.mod go.sum main.go playgen proto README.md server
❯ ./playgen
Hello, vim-go!
&lt;/code>&lt;/pre></content></item><item><title>Functional_options_golang</title><link>https://williamcook.dev/posts/functional_options_golang/</link><pubDate>Wed, 07 Aug 2024 21:08:38 -0400</pubDate><guid>https://williamcook.dev/posts/functional_options_golang/</guid><description>&lt;h1 id="lets-say">Lets say&amp;hellip;&lt;/h1>
&lt;p>You are the maintainer of a widely used function in a fairly large service. This function abstracts away
all of the boilerplate necessary to log an error. The wider service has several different debugging tools.
For example, it could:&lt;/p>
&lt;ol>
&lt;li>Log errors to &lt;a href="https://rollbar.com">Rollbar&lt;/a>&lt;/li>
&lt;li>Instrument &lt;a href="https://opentelemetry.io/">OpenTelemetry&lt;/a>&lt;/li>
&lt;li>Support logging to stdout, to disk, or an async log aggregator.&lt;/li>
&lt;/ol>
&lt;p>the list can theoretically go on and on.&lt;/p>
&lt;h2 id="logerrorss-humble-beginnings">LogErrors&amp;rsquo;s Humble Beginnings&lt;/h2>
&lt;p>To start, you write your function to support your own use case, and make the api easy to consume for others.&lt;/p></description><content>&lt;h1 id="lets-say">Lets say&amp;hellip;&lt;/h1>
&lt;p>You are the maintainer of a widely used function in a fairly large service. This function abstracts away
all of the boilerplate necessary to log an error. The wider service has several different debugging tools.
For example, it could:&lt;/p>
&lt;ol>
&lt;li>Log errors to &lt;a href="https://rollbar.com">Rollbar&lt;/a>&lt;/li>
&lt;li>Instrument &lt;a href="https://opentelemetry.io/">OpenTelemetry&lt;/a>&lt;/li>
&lt;li>Support logging to stdout, to disk, or an async log aggregator.&lt;/li>
&lt;/ol>
&lt;p>the list can theoretically go on and on.&lt;/p>
&lt;h2 id="logerrorss-humble-beginnings">LogErrors&amp;rsquo;s Humble Beginnings&lt;/h2>
&lt;p>To start, you write your function to support your own use case, and make the api easy to consume for others.&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-code" data-lang="code">func LogError(e error, msg string) {
// assume a logger is configured
logger.Error(e.Error + &amp;#34;: &amp;#34; + msg)
}
&lt;/code>&lt;/pre>&lt;p>This is a simple enough function that formats an error and invokes the configured logger at the Error level.&lt;/p>
&lt;h2 id="logerrors-organic-growth">LogError&amp;rsquo;s Organic Growth&lt;/h2>
&lt;p>As this service matures, things can get out of hand. Let&amp;rsquo;s introduce some other, optional dependencies in a naive way.&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-code" data-lang="code">func LogError(e error, msg string, shouldRollbar bool, spanCtx context.Context) {
fmtErr := e.Error + &amp;#34;: &amp;#34; + msg
if shouldRollbar {
rollbar.Error(fmtErr)
}
if spanCtx != nil {
span := otel.NewSpan(&amp;#34;LogError&amp;#34;, spanCtx)
defer span.End()
span.RecordError(fmtErr)
}
logger.Error(fmtErr)
}
&lt;/code>&lt;/pre>&lt;p>This is fine and functional, but you can see how adding additional, optional features requires a full refactor of every function call. Furthermore, the caller has to populate these arguments even if they are falsy or &lt;code>nil&lt;/code>.&lt;/p>
&lt;h2 id="a-better-way">A Better Way&lt;/h2>
&lt;p>We can enforce some required arguments by defining them as we would before. Let&amp;rsquo;s say that &lt;code>err&lt;/code> and &lt;code>msg&lt;/code> are required params. However, logging to a span or triggering a Rollbar are completely optional. We can save the caller a hastle by not requiring them in the function call at all by using the functional options pattern.&lt;/p>
&lt;h1 id="functional-options">Functional Options&lt;/h1>
&lt;p>We need to create an &lt;code>option&lt;/code> type that we use internally to drive the logic for behavior. Leave this unexported so the caller doesn&amp;rsquo;t try and use it directly.&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-code" data-lang="code">type option struct {
withRollbar bool
withContext context.Context
}
&lt;/code>&lt;/pre>&lt;p>The real magic happens when we create a type that returns a function that accepts the option as an argument.&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-code" data-lang="code">type Options func(*option)
&lt;/code>&lt;/pre>&lt;p>We now create functions that return the &lt;code>Options&lt;/code> type that the caller can use.&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-code" data-lang="code">func WithRollbar() Options {
return func(o *option) {
o.withRollbar = true
}
}
func WithContext(ctx context.Context) Option {
return func(o *option) {
o.withContext = ctx
}
}
&lt;/code>&lt;/pre>&lt;h2 id="leveraging-functional-options">Leveraging Functional Options&lt;/h2>
&lt;p>All of the pieces are coming together, but as &lt;code>LogError&lt;/code> stands, it does not use options. Let&amp;rsquo;s fix that by first changing the function signature.&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-code" data-lang="code">func LogError(err error, msg string, opts ...Options) {
// function body
}
&lt;/code>&lt;/pre>&lt;p>Now the &lt;code>err&lt;/code> and &lt;code>message&lt;/code> arguments are required by the compiler (even if nil or empty). The &lt;code>...Options&lt;/code> syntax indicates that &lt;code>LogError&lt;/code> is now a &lt;em>variadic function&lt;/em>, and that the trailing arguments is a slice of length &amp;gt;= 0. The compiler will not enforce that any argument is present for the variadic argument. Functionally this means that &lt;code>opts&lt;/code> is entirely optional! However, we still need to leverage these options within the function.&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-code" data-lang="code">func LogError(err error, msg string, opts ...Options) {
fmtErr := err.Error() + &amp;#34;: &amp;#34; + msg
// instantiate an option struct to populate with
// provided options
o := options{}
// iterate through the provided options to populate
// data on the struct
for _, opt := opts {
opt(o)
}
// start performing logic based on provided options
if o.withRollbar {
rollbar.Error(fmtErr)
}
if o.withContext != nil {
span := otel.NewSpan(&amp;#34;LogError&amp;#34;, spanCtx)
defer span.End()
span.RecordError(fmtErr)
}
logger.Error(fmtErr)
}
&lt;/code>&lt;/pre>&lt;p>You can see the function body doesn&amp;rsquo;t change &lt;em>all that much&lt;/em>. But we have significatly reduced the signature and uncomplicated the things the caller needs to worry about.&lt;/p>
&lt;h2 id="using-logerror">Using LogError&lt;/h2>
&lt;p>With functional arguments, all of these are valid invocations of &lt;code>LogError&lt;/code>.&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-code" data-lang="code">err := errors.New(&amp;#34;there was an error!&amp;#34;)
msg := &amp;#34;could not perform operation&amp;#34;
ctx := context.Background()
LogError(err, msg)
LogError(err, msg, WithContext(ctx))
LogError(err, msg, WithRollbar())
LogError(err, msg, WithContext(ctx), WithRollbar())
LogError(err, msg, WithRollbar(), WithContext(ctx))
&lt;/code>&lt;/pre>&lt;p>Consumers of &lt;code>LogError&lt;/code> now no longer need to worry about providing a nil context or falsy &lt;code>shouldRollbar&lt;/code> value if they are unconcerned about those features.&lt;/p>
&lt;h2 id="extending-logerror">Extending LogError&lt;/h2>
&lt;p>Now that &lt;code>LogError&lt;/code> is a variadic function, we can add more options without needing to refactor any of its consumers. Let&amp;rsquo;s implement optionally logging to disk instead of standard out.&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-code" data-lang="code">type option struct {
withRollbar bool
withContext context.Context
withLogToDisk bool // new field
}
func WithLogToDisk() Option {
return func(o *option) {
o.withLogToDisk = true
}
}
func LogError(err error, msg string, opts ...Options) {
fmtErr := err.Error() + &amp;#34;: &amp;#34; + msg
// instantiate an option struct to populate with
// provided options
o := options{}
// iterate through the provided options to populate
// data on the struct
for _, opt := opts {
opt(o)
}
// start performing logic based on provided options
if o.withRollbar {
rollbar.Error(fmtErr)
}
if o.withContext != nil {
span := otel.NewSpan(&amp;#34;LogError&amp;#34;, spanCtx)
defer span.End()
span.RecordError(fmtErr)
}
if o.withLogToDisk {
// helper function assumed to exist
logErrorToDisk(fmtErr)
return
}
logger.Error(fmtErr)
}
&lt;/code>&lt;/pre>&lt;p>&lt;code>LogError&lt;/code> is now more functional for consumers who wish to leverage this option. However, because of the variadic nature of &lt;code>LogError&lt;/code>, we don&amp;rsquo;t need to do a single bit of refactoring the consumers and the api is unchanged. Anyone who wishes to log to disk instead of to standard out can do so like this:&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-code" data-lang="code">err := errors.New(&amp;#34;there was an error!&amp;#34;)
msg := &amp;#34;could not perform operation&amp;#34;
LogError(err, msg, WithLogToDisk())
&lt;/code>&lt;/pre>&lt;h1 id="thats-pretty-neat">That&amp;rsquo;s Pretty Neat&lt;/h1>
&lt;p>There is the overhead of planning for which arguments are required and which are options when maintaining a function such as &lt;code>LogError&lt;/code>. However, if you know that the function will be broadly consumed from users with differing needs then utilizing functional options is a great way to implement those dependencies without forcing them on every consumer. Functional options allow for easily extending functionality without requiring large refactors for the consumers of its api.&lt;/p></content></item></channel></rss>