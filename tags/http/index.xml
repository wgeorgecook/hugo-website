<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Http on</title><link>https://williamcook.dev/tags/http/</link><description>Recent content in Http on</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Mon, 30 Dec 2024 20:24:38 -0500</lastBuildDate><atom:link href="https://williamcook.dev/tags/http/index.xml" rel="self" type="application/rss+xml"/><item><title>Go Http Mocks and Testing</title><link>https://williamcook.dev/posts/go-http-mocks-and-testing/</link><pubDate>Mon, 30 Dec 2024 20:24:38 -0500</pubDate><guid>https://williamcook.dev/posts/go-http-mocks-and-testing/</guid><description>&lt;h1 id="testing-http-endpoints">Testing HTTP Endpoints&lt;/h1>
&lt;p>Over Christmas I decided to do a small dive into HTTP testing in Go after discovering the &lt;a href="https://pkg.go.dev/net/http/httptest">net/http/httptest library&lt;/a> while writing my &lt;a href="#ZgotmplZ">Go Ignite Talk&lt;/a>.&lt;/p>
&lt;h1 id="the-code">The Code&lt;/h1>
&lt;p>The code discussed here is from &lt;a href="https://github.com/wgeorgecook/http-testing/tree/main">my Github repository&lt;/a>. All of the code there is pretty well documented and if you have a good understanding of &lt;a href="https://williamcook.dev/posts/botanical_exploration_of_abstract_types_in_go/">Go interfaces&lt;/a> and patterns (factory and dependency injection specifically) you would do well to read the code rather than this post.&lt;/p></description><content>&lt;h1 id="testing-http-endpoints">Testing HTTP Endpoints&lt;/h1>
&lt;p>Over Christmas I decided to do a small dive into HTTP testing in Go after discovering the &lt;a href="https://pkg.go.dev/net/http/httptest">net/http/httptest library&lt;/a> while writing my &lt;a href="#ZgotmplZ">Go Ignite Talk&lt;/a>.&lt;/p>
&lt;h1 id="the-code">The Code&lt;/h1>
&lt;p>The code discussed here is from &lt;a href="https://github.com/wgeorgecook/http-testing/tree/main">my Github repository&lt;/a>. All of the code there is pretty well documented and if you have a good understanding of &lt;a href="https://williamcook.dev/posts/botanical_exploration_of_abstract_types_in_go/">Go interfaces&lt;/a> and patterns (factory and dependency injection specifically) you would do well to read the code rather than this post.&lt;/p>
&lt;h2 id="testing-the-api-server">Testing the API Server&lt;/h2>
&lt;p>First, let&amp;rsquo;s examine the HTTP server tests. You can find the handler in &lt;code>http-testing/internal/pkg/server/handlers.go&lt;/code>. The code is very straightforward.&lt;/p>
&lt;pre tabindex="0">&lt;code>func getResourceHandler(w http.ResponseWriter, req *http.Request) {
idCheck, ok := req.URL.Query()[&amp;#34;id&amp;#34;]
if !ok || idCheck[0] == &amp;#34;&amp;#34; {
http.Error(w, errs.ErrIdRequired.Error(), http.StatusBadRequest)
return
}
id := idCheck[0]
if id == &amp;#34;3&amp;#34; {
http.Error(w, errs.ErrIdNotFound.Error(), http.StatusNotFound)
return
}
r := resources.Resource{ID: id}
rBytes, err := json.Marshal(r)
if err != nil {
http.Error(w, err.Error(), http.StatusInternalServerError)
}
w.Header().Set(&amp;#34;Content-Type&amp;#34;, &amp;#34;application/json&amp;#34;)
written, err := w.Write(rBytes)
if err != nil {
http.Error(w, err.Error(), http.StatusInternalServerError)
return
}
w.Header().Set(&amp;#34;Content-Length&amp;#34;, strconv.Itoa(written))
return
}
&lt;/code>&lt;/pre>&lt;p>Of note, it&lt;/p>
&lt;ol>
&lt;li>Ensures that a &lt;code>id&lt;/code> query parameter was passed in on the request.&lt;/li>
&lt;li>Returns &lt;code>HTTP NOT FOUND&lt;/code> if the ID provided is specifically 3.&lt;/li>
&lt;li>Returns the resource with any other ID.&lt;/li>
&lt;/ol>
&lt;h3 id="http-test">HTTP Test&lt;/h3>
&lt;p>Using the standard library tool &lt;code>net/http/httptest&lt;/code>, I am able to record a mock request. The action happens in this function found in &lt;code>http-testing/internal/pkg/server/handlers_test.go&lt;/code>&lt;/p>
&lt;pre tabindex="0">&lt;code>var getResp = func(id string) (*http.Response, []byte) {
req := httptest.NewRequest(&amp;#34;GET&amp;#34;, &amp;#34;http://example.com/api/v1/resources?id=&amp;#34;+id, nil)
w := httptest.NewRecorder()
getResourceHandler(w, req)
resp := w.Result()
defer resp.Body.Close()
body, _ := io.ReadAll(resp.Body)
return resp, body
}
&lt;/code>&lt;/pre>&lt;p>In ~10 lines of code I&amp;rsquo;m able to call the handler with whatever data I want to pass into it and get an &lt;code>*http.Response&lt;/code> and &lt;code>[]byte&lt;/code> back to unmarshal into whatever object I need to. No custom impmentation needed on this side! I&amp;rsquo;ll leave it as an exercise to the reader to check out the actual test cases and see how I am asserting the data my handler returns is correct.&lt;/p>
&lt;h2 id="testing-the-api-consumer">Testing the API Consumer&lt;/h2>
&lt;p>The API consumer is responsible for actually making network requests, so testing it&amp;rsquo;s behavior is a little more complicated. The first step to success is using &lt;a href="https://www.freecodecamp.org/news/a-quick-intro-to-dependency-injection-what-it-is-and-when-to-use-it-7578c84fa88f/">dependency injection&lt;/a> via a provided HTTP client. So let&amp;rsquo;s take a look at the &lt;code>api.Client&lt;/code>.&lt;/p>
&lt;pre tabindex="0">&lt;code>// Client is the default way to interact with
// the API SDK. Requests to the remote endpoints
// are made via the HttpClient provided.
type Client struct {
HttpClient HttpClient
}
&lt;/code>&lt;/pre>&lt;p>&lt;code>api.Client&lt;/code> requires an &lt;code>HttpClient&lt;/code>, which we descibe as an interface with a &lt;code>Get&lt;/code> method.&lt;/p>
&lt;pre tabindex="0">&lt;code>// HttpClient is an interface that partially
// supports the http.Client interface and
// allows mocking requests made on it.
type HttpClient interface {
Get(url string) (resp *http.Response, err error)
}
&lt;/code>&lt;/pre>&lt;p>Since the &lt;a href="https://pkg.go.dev/net/http#Client.Get">http.Client&lt;/a> satisfies this, we can always pass in that when constructing a new Client. But it leaves the option to allow the consumer to pass in something more custom. This is exactly how we are able to test this.&lt;/p>
&lt;h3 id="mocking-requests">Mocking Requests&lt;/h3>
&lt;p>A custom struct that satisfies the &lt;code>HttpClient&lt;/code> interface is tucked away in &lt;code>http-testing/internal/pkg/utils/mocks/httpClientMock.go&lt;/code>.&lt;/p>
&lt;pre tabindex="0">&lt;code>// HTTPClientMock is the type that receives requests
// during the tests for an api.Client.
type HTTPClientMock struct{}
// Get implements the api.HttpClient interface and
// receives requests made by the api.Client when
// client.HttpClient.Get is called.
// Note: Specific behaviors expected from the
// remote endpoint MUST be updated or implemented
// in this function for the tests to remain valid.
func (c *HTTPClientMock) Get(endpoint string) (*http.Response, error) {
fullUrl, err := url.Parse(endpoint)
if err != nil {
return nil, err
}
id := fullUrl.Query().Get(&amp;#34;id&amp;#34;)
switch id {
case &amp;#34;&amp;#34;:
return &amp;amp;http.Response{
StatusCode: http.StatusBadRequest,
Body: io.NopCloser(strings.NewReader(errs.ErrIdRequired.Error())),
}, errs.ErrIdRequired
case &amp;#34;1&amp;#34;:
return &amp;amp;http.Response{
StatusCode: http.StatusOK,
Body: io.NopCloser(strings.NewReader(MockResourseId1)),
}, nil
case &amp;#34;3&amp;#34;:
return &amp;amp;http.Response{
StatusCode: http.StatusNotFound,
Body: io.NopCloser(strings.NewReader(errs.ErrIdNotFound.Error())),
}, errs.ErrIdNotFound
}
return &amp;amp;http.Response{StatusCode: http.StatusNotImplemented}, errs.ErrUnimplemented
}
&lt;/code>&lt;/pre>&lt;p>When testing the client, all of the expected behavior must be implemented in this &lt;code>HTTPClientMock.Get()&lt;/code> function. Notice here that things are exactly as you would expect if you read the tests from the API server. An &lt;code>id&lt;/code> query param is required, but any time &lt;code>id=3&lt;/code> is provided you&amp;rsquo;ll get an &lt;code>HTTP NOT FOUND&lt;/code> status code back. Try and understand how this client hijacks the requests made in the &lt;code>client.GetResourceByID()&lt;/code> request via dependency injection as I mentioned above. You can find the tests in &lt;code>http-testing/internal/pkg/api/http_test.go&lt;/code>.&lt;/p>
&lt;h1 id="in-closing">In Closing&lt;/h1>
&lt;p>This is a &lt;em>very brief, very contrived&lt;/em> way to get some HTTP tests done for your API servers and your consumers. I encourage you to use this as a baseline and try and implement mock tests in your own code. Experiment and really understand how things work under the hood and I&amp;rsquo;m sure your own code quality will get better as a side effect!&lt;/p></content></item></channel></rss>